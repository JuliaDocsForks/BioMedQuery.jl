{
    "docs": [
        {
            "location": "/", 
            "text": "BioMedQuery Julia Package\n\n\nJulia utilities to process and save results from BioMedical databases/APIs.\n\n\nBioServices.jl\n (part of BioJulia) provides the basic interface to some of the APIs, while BioMedQuery helps parse and save results into MySQL, SQLite, DataFrames, CSV etc.\n\n\nSupported APIs include:\n\n\nNational Library of Medicine (NLM)\n\n\n\n\nEntrez Programming Utilities \n(E-Utilities)\n\n\nUnified Medical Language System \n(UMLS)\n\n\nClinical Trials \n(clinicaltrials.gov)\n\n\nMEDLINE \n(PubMed MEDLINE)\n\n\n\n\n\n\nInstallation\n\n\nBioMedQuery is a registered package. To install the latest \nstable version\n, use the package manager.\n\n\nPkg\n.\nadd\n(\nBioMedQuery\n)\n\n\n\n\n\n\nTo chekout the current master (development) branch:\n\n\nPkg\n.\ncheckout\n(\nBioMedQuery\n)\n\n\n\n\n\n\n`\n\n\n\n\nRelated Packages\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBioServices.jl\n\n\nInterface to EUtils and UMLS APIs\n\n\n\n\n\n\nPubMedMiner.jl\n\n\nExamples of comorbidity studies using PubMed articles", 
            "title": "Home"
        }, 
        {
            "location": "/#biomedquery-julia-package", 
            "text": "Julia utilities to process and save results from BioMedical databases/APIs.  BioServices.jl  (part of BioJulia) provides the basic interface to some of the APIs, while BioMedQuery helps parse and save results into MySQL, SQLite, DataFrames, CSV etc.  Supported APIs include:  National Library of Medicine (NLM)   Entrez Programming Utilities  (E-Utilities)  Unified Medical Language System  (UMLS)  Clinical Trials  (clinicaltrials.gov)  MEDLINE  (PubMed MEDLINE)", 
            "title": "BioMedQuery Julia Package"
        }, 
        {
            "location": "/#installation", 
            "text": "BioMedQuery is a registered package. To install the latest  stable version , use the package manager.  Pkg . add ( BioMedQuery )   To chekout the current master (development) branch:  Pkg . checkout ( BioMedQuery )   `", 
            "title": "Installation"
        }, 
        {
            "location": "/#related-packages", 
            "text": "Function  Description      BioServices.jl  Interface to EUtils and UMLS APIs    PubMedMiner.jl  Examples of comorbidity studies using PubMed articles", 
            "title": "Related Packages"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nThe repository contains an \nexamples folder\n with scripts demonstrating how to use BioMedQuery's pre-assembled high-level processes and workflows.\n\n\nThe following examples are available:\n\n\n\n\n\n\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSearch and Save PubMed Queries\n\n\nSearch PubMed, parse results, store them using a MySQL or SQLite backend, or export to a  citation library\n\n\n\n\n\n\nBuild MeSH-UMLS map\n\n\nFor all MeSH descriptors in a given database, build a table to match them to their UMLS concept\n\n\n\n\n\n\nOccurrence Matrix\n\n\nBuild an occurrence matrix indicating articles associated with MeSH descriptors of a given UMLS concept\n\n\n\n\n\n\nExporting Citations\n\n\nExport the citation for one or more PMIDs to an Endnote/Bibtex file\n\n\n\n\n\n\nLoading MEDLINE\n\n\nLoad the MEDLINE baseline files", 
            "title": "Overview"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "The repository contains an  examples folder  with scripts demonstrating how to use BioMedQuery's pre-assembled high-level processes and workflows.  The following examples are available:     Example  Description      Search and Save PubMed Queries  Search PubMed, parse results, store them using a MySQL or SQLite backend, or export to a  citation library    Build MeSH-UMLS map  For all MeSH descriptors in a given database, build a table to match them to their UMLS concept    Occurrence Matrix  Build an occurrence matrix indicating articles associated with MeSH descriptors of a given UMLS concept    Exporting Citations  Export the citation for one or more PMIDs to an Endnote/Bibtex file    Loading MEDLINE  Load the MEDLINE baseline files", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/", 
            "text": "Search PubMed and Save Results\n\n\n\n\nThis example demonstrates the typical workflow to query pubmed and store the results. The following backends are supported for storing the results:\n\n\n\n\nMySQL\n\n\nSQLite\n\n\nCitation (endnote/bibtex)\n\n\nDataFrames\n\n\n\n\n\n\nSet Up\n\n\nusing\n \nBioMedQuery\n.\nDBUtils\n\n\nusing\n \nBioMedQuery\n.\nPubMed\n\n\nusing\n \nBioMedQuery\n.\nProcesses\n\n\nusing\n \nDataFrames\n\n\nusing\n \nMySQL\n\n\nusing\n \nSQLite\n\n\n\n\n\n\nVariables used to search PubMed\n\n\nemail\n \n=\n \n;\n \n# Only needed if you want to contact NCBI with inqueries\n\n\nsearch_term\n \n=\n \n(obesity[MeSH Major Topic]) AND (\n2010\n[Date - Publication] : \n2012\n[Date - Publication])\n;\n\n\nmax_articles\n \n=\n \n5\n;\n\n\nresults_dir\n \n=\n \n.\n;\n\n\nverbose\n \n=\n \ntrue\n;\n\n\n\n\n\n\n\n\nMySQL backend\n\n\nInitialize database, if it exists it connects to it, otherwise it creates it\n\n\nconst\n \nmysql_conn\n \n=\n \nDBUtils\n.\ninit_mysql_database\n(\n127.0.0.1\n,\n \nroot\n,\n \n,\n \npubmed_obesity_2010_2012\n);\n\n\n\n\n\n\nCreates (and deletes if they already exist) all tables needed to save a pubmed search\n\n\nPubMed\n.\ncreate_tables!\n(\nmysql_conn\n);\n\n\n\n\n\n\nSearch pubmed and save results to database\n\n\nProcesses\n.\npubmed_search_and_save!\n(\nemail\n,\n \nsearch_term\n,\n \nmax_articles\n,\n \nmysql_conn\n,\n \nverbose\n)\n\n\n\n\n\n\nGetting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to database--------\nSaving 5 articles to database\nFinished searching, total number of articles: 5\n\n\n\n\n\n\n\nAccess all PMIDs\n\n\nall_pmids\n(\nmysql_conn\n)\n\n\n\n\n\n\n5-element Array{Int32,1}:\n 24315250\n 24444198\n 24533500\n 24694474\n 25548090\n\n\n\n\n\n\n\nExplore tables\n\n\nYou may use the MySQL command directly. If you want the return type to be a DataFrame, you need to explicitly request so.\n\n\ntables\n \n=\n \n[\nauthor_ref\n,\n \nmesh_desc\n,\n \nmesh_qual\n,\n \nmesh_heading\n]\n\n\nfor\n \nt\n \nin\n \ntables\n\n    \nquery_str\n \n=\n \nSELECT * FROM \n$t\n LIMIT 5;\n\n    \nq\n \n=\n \nMySQL\n.\nquery\n(\nmysql_conn\n,\n \nquery_str\n,\n \nDataFrame\n)\n\n    \nprintln\n(\nq\n)\n\n\nend\n\n\n\n\n\n\n5\u00d79 DataFrames.DataFrame. Omitted printing of 3 columns\n\u2502 Row \u2502 pmid     \u2502 last_name \u2502 first_name \u2502 initials \u2502 suffix  \u2502 orcid   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 So        \u2502 Eun Sun    \u2502 ES       \u2502 missing \u2502 missing \u2502\n\u2502 2   \u2502 25548090 \u2502 Yoo       \u2502 Kwang Soo  \u2502 KS       \u2502 missing \u2502 missing \u2502\n\u2502 3   \u2502 24694474 \u2502 Sakurai   \u2502 Masaru     \u2502 M        \u2502 missing \u2502 missing \u2502\n\u2502 4   \u2502 24694474 \u2502 Nakamura  \u2502 Koshi      \u2502 K        \u2502 missing \u2502 missing \u2502\n\u2502 5   \u2502 24694474 \u2502 Miura     \u2502 Katsuyuki  \u2502 K        \u2502 missing \u2502 missing \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid  \u2502 name                 \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 328  \u2502 Adult                \u2502 2018-07-19T15:17:25 \u2502\n\u2502 2   \u2502 368  \u2502 Aged                 \u2502 2018-07-19T15:17:25 \u2502\n\u2502 3   \u2502 369  \u2502 Aged, 80 and over    \u2502 2018-07-19T15:17:25 \u2502\n\u2502 4   \u2502 704  \u2502 Analysis of Variance \u2502 2018-07-19T15:17:25 \u2502\n\u2502 5   \u2502 1835 \u2502 Body Weight          \u2502 2018-07-19T15:17:25 \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid \u2502 name          \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 32  \u2502 analysis      \u2502 2018-07-19T15:17:25 \u2502\n\u2502 2   \u2502 97  \u2502 blood         \u2502 2018-07-19T15:17:25 \u2502\n\u2502 3   \u2502 150 \u2502 complications \u2502 2018-07-19T15:17:25 \u2502\n\u2502 4   \u2502 208 \u2502 ethnology     \u2502 2018-07-19T15:17:25 \u2502\n\u2502 5   \u2502 209 \u2502 etiology      \u2502 2018-07-19T15:17:25 \u2502\n5\u00d76 DataFrames.DataFrame. Omitted printing of 1 columns\n\u2502 Row \u2502 pmid     \u2502 desc_uid \u2502 desc_maj_status \u2502 qual_uid \u2502 qual_maj_status \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 17677    \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 2   \u2502 25548090 \u2502 368      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 3   \u2502 25548090 \u2502 369      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 4   \u2502 25548090 \u2502 5260     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 5   \u2502 25548090 \u2502 6801     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\n\n\n\n\nMySQL\n.\ndisconnect\n(\nmysql_conn\n);\n\n\n\n\n\n\n\n\nSQLite backend\n\n\nconst\n \ndb_path\n \n=\n \n$\n(\nresults_dir\n)\n/pubmed_obesity_2010_2012.db\n;\n\n\n\n\n\n\nOverwrite the database if it already exists\n\n\nif\n \nisfile\n(\ndb_path\n)\n\n    \nrm\n(\ndb_path\n)\n\n\nend\n\n\n\n\n\n\nConnect to the database\n\n\nconst\n \nconn_sqlite\n \n=\n \nSQLite\n.\nDB\n(\ndb_path\n);\n\n\n\n\n\n\nCreates (and deletes if they already exist) all tables needed to save a pubmed search\n\n\nPubMed\n.\ncreate_tables!\n(\nconn_sqlite\n);\n\n\n\n\n\n\nSearch PubMed and save the results\n\n\nProcesses\n.\npubmed_search_and_save!\n(\nemail\n,\n \nsearch_term\n,\n \nmax_articles\n,\n \nconn_sqlite\n,\n \nverbose\n)\n\n\n\n\n\n\nGetting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to database--------\nSaving 5 articles to database\nFinished searching, total number of articles: 5\n\n\n\n\n\n\n\nAccess all PMIDs\n\n\nall_pmids\n(\nconn_sqlite\n)\n\n\n\n\n\n\n5-element Array{Union{Int64, Missings.Missing},1}:\n 24315250\n 24444198\n 24533500\n 24694474\n 25548090\n\n\n\n\n\n\n\nExplore the tables\n\n\nYou may use the SQLite commands directly. The return type is a DataFrame.\n\n\ntables\n \n=\n \n[\nauthor_ref\n,\n \nmesh_desc\n,\n \nmesh_qual\n,\n \nmesh_heading\n]\n\n\nfor\n \nt\n \nin\n \ntables\n\n    \nquery_str\n \n=\n \nSELECT * FROM \n$t\n LIMIT 5;\n\n    \nq\n \n=\n \nSQLite\n.\nquery\n(\nconn_sqlite\n,\n \nquery_str\n)\n\n    \nprintln\n(\nq\n)\n\n\nend\n\n\n\n\n\n\n5\u00d79 DataFrames.DataFrame. Omitted printing of 3 columns\n\u2502 Row \u2502 pmid     \u2502 last_name \u2502 first_name \u2502 initials \u2502 suffix  \u2502 orcid   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 So        \u2502 Eun Sun    \u2502 ES       \u2502 missing \u2502 missing \u2502\n\u2502 2   \u2502 25548090 \u2502 Yoo       \u2502 Kwang Soo  \u2502 KS       \u2502 missing \u2502 missing \u2502\n\u2502 3   \u2502 24694474 \u2502 Sakurai   \u2502 Masaru     \u2502 M        \u2502 missing \u2502 missing \u2502\n\u2502 4   \u2502 24694474 \u2502 Nakamura  \u2502 Koshi      \u2502 K        \u2502 missing \u2502 missing \u2502\n\u2502 5   \u2502 24694474 \u2502 Miura     \u2502 Katsuyuki  \u2502 K        \u2502 missing \u2502 missing \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid   \u2502 name              \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 12016 \u2502 Reference Values  \u2502 2018-07-19 15:17:25 \u2502\n\u2502 2   \u2502 56910 \u2502 Republic of Korea \u2502 2018-07-19 15:17:25 \u2502\n\u2502 3   \u2502 12372 \u2502 ROC Curve         \u2502 2018-07-19 15:17:26 \u2502\n\u2502 4   \u2502 5221  \u2502 Fatigue           \u2502 2018-07-19 15:17:26 \u2502\n\u2502 5   \u2502 9765  \u2502 Obesity           \u2502 2018-07-19 15:17:26 \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid \u2502 name                        \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 208 \u2502 ethnology                   \u2502 2018-07-19 15:17:26 \u2502\n\u2502 2   \u2502 706 \u2502 statistics \n numerical data \u2502 2018-07-19 15:17:26 \u2502\n\u2502 3   \u2502 453 \u2502 epidemiology                \u2502 2018-07-19 15:17:26 \u2502\n\u2502 4   \u2502 502 \u2502 physiology                  \u2502 2018-07-19 15:17:26 \u2502\n\u2502 5   \u2502 32  \u2502 analysis                    \u2502 2018-07-19 15:17:26 \u2502\n5\u00d76 DataFrames.DataFrame. Omitted printing of 1 columns\n\u2502 Row \u2502 pmid     \u2502 desc_uid \u2502 desc_maj_status \u2502 qual_uid \u2502 qual_maj_status \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 17677    \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 2   \u2502 25548090 \u2502 368      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 3   \u2502 25548090 \u2502 369      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 4   \u2502 25548090 \u2502 5260     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 5   \u2502 25548090 \u2502 6801     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\n\n\n\n\n\n\nCitations\n\n\nCitation type can be \"endnote\" or \"bibtex\"\n\n\nenw_file\n \n=\n \n$\n(\nresults_dir\n)\n/pubmed_obesity_2010_2012.enw\n\n\nendnote_citation\n \n=\n \nPubMed\n.\nCitationOutput\n(\nendnote\n,\n \nenw_file\n,\n \ntrue\n)\n\n\nProcesses\n.\npubmed_search_and_save!\n(\nemail\n,\n \nsearch_term\n,\n \nmax_articles\n,\n \nendnote_citation\n,\n \nverbose\n);\n\n\n\nprintln\n(\nreadstring\n(\nenw_file\n))\n\n\n\n\n\n\nGetting\n \n5\n \narticles\n,\n \nstarting\n \nat\n \nindex\n \n0\n\n\n------ESearch--------\n\n\n------EFetch--------\n\n\n------Save\n \nto\n \ndatabase--------\n\n\nSaving\n \ncitation\n \nfor\n \n5\n \narticles\n\n\nFinished\n \nsearching\n,\n \ntotal\n \nnumber\n \nof\n \narticles\n:\n \n5\n\n\n%\n0\n \nJournal\n \nArticle\n\n\n%\nA\n \nSo\n,\n \nES\n\n\n%\nA\n \nYoo\n,\n \nKS\n\n\n%\nD\n \n2015\n\n\n%\nT\n \nWaist\n \ncircumference\n \ncutoff\n \npoints\n \nfor\n \ncentral\n \nobesity\n \nin\n \nthe\n \nKorean\n \nelderly\n \npopulation\n.\n\n\n%\nJ\n \nJ\n \nAppl\n \nGerontol\n\n\n%\nV\n \n34\n\n\n%\nN\n \n1\n\n\n%\nP\n \n102-17\n\n\n%\nM\n \n25548090\n\n\n%\nU\n \nhttp\n://\nwww\n.\nncbi\n.\nnlm\n.\nnih\n.\ngov\n/\npubmed\n/\n25548090\n\n\n%\nX\n \nString\n[\nThe aim is to determine the appropriate cutoff values of waist circumference (WC) for an increased risk of the metabolic syndrome in the Korean elderly population. We analyzed the WC cutoff values of four groups divided according to sex and age with a total of 2,224 elderly participants aged 65 years old and above from the Fourth Korean National Health and Nutrition Examination Survey using the receiver operating characteristic curve and multiple logistic regression. The WC cutoff values associated with an increased risk of metabolic syndrome were 89.6 cm for men and 90.5 cm for women for those who were 65 to 74 years old, and 89.9 cm for men and 87.9 cm for women for those who were 75 years old or older. WC cutoff points for estimating metabolic risk are similar in elderly men and women. Age-specific optimal WC cutoff points should be considered especially for elderly women in screening for metabolic syndrome. \n]\n\n\n%\nK\n \nAge\n \nDistribution\n\n\n%\nK\n \nAged\n\n\n%\nK\n \nAged\n,\n \n80\n \nand\n \nover\n\n\n%\nK\n \nFemale\n\n\n%\nK\n \nHumans\n\n\n%\nK\n \nLogistic\n \nModels\n\n\n%\nK\n \nMale\n\n\n%\nK\n \nMetabolic\n \nSyndrome\n\n\n%\nK\n \nNutrition\n \nSurveys\n\n\n%\nK\n \nObesity\n,\n \nAbdominal\n\n\n%\nK\n \nROC\n \nCurve\n\n\n%\nK\n \nRepublic\n \nof\n \nKorea\n\n\n%\nK\n \nRisk\n \nFactors\n\n\n%\nK\n \nSex\n \nDistribution\n\n\n%\nK\n \nWaist\n \nCircumference\n\n\n%+\n \nChonbuk\n \nNational\n \nUniversity\n,\n \nSouth\n \nKorea\n \nsoeunjee\n@\nnaver\n.\ncom\n.\n;\n \nChonbuk\n \nNational\n \nUniversity\n,\n \nSouth\n \nKorea\n.\n\n\n\n%\n0\n \nJournal\n \nArticle\n\n\n%\nA\n \nSakurai\n,\n \nM\n\n\n%\nA\n \nNakamura\n,\n \nK\n\n\n%\nA\n \nMiura\n,\n \nK\n\n\n%\nA\n \nYoshita\n,\n \nK\n\n\n%\nA\n \nTakamura\n,\n \nT\n\n\n%\nA\n \nNagasawa\n,\n \nSY\n\n\n%\nA\n \nMorikawa\n,\n \nY\n\n\n%\nA\n \nIshizaki\n,\n \nM\n\n\n%\nA\n \nKido\n,\n \nT\n\n\n%\nA\n \nNaruse\n,\n \nY\n\n\n%\nA\n \nNakashima\n,\n \nM\n\n\n%\nA\n \nNogawa\n,\n \nK\n\n\n%\nA\n \nSuwazono\n,\n \nY\n\n\n%\nA\n \nNakagawa\n,\n \nH\n\n\n%\nD\n \n2014\n\n\n%\nT\n \nAssociation\n \nbetween\n \na\n \nserum\n \nthyroid-stimulating\n \nhormone\n \nconcentration\n \nwithin\n \nthe\n \nnormal\n \nrange\n \nand\n \nindices\n \nof\n \nobesity\n \nin\n \nJapanese\n \nmen\n \nand\n \nwomen\n.\n\n\n%\nJ\n \nIntern\n.\n \nMed\n.\n\n\n%\nV\n \n53\n\n\n%\nN\n \n7\n\n\n%\nP\n \n669-74\n\n\n%\nM\n \n24694474\n\n\n%\nU\n \nhttp\n://\nwww\n.\nncbi\n.\nnlm\n.\nnih\n.\ngov\n/\npubmed\n/\n24694474\n\n\n%\nX\n \nString\n[\nOBJECTIVE: This cross-sectional study investigated the associations between the serum thyroid-stimulating hormone (TSH) concentration and indices of obesity in middle-aged Japanese men and women. METHODS: The participants were 2,037 employees (1,044 men and 993 women; age, 36-55 yr) of a metal products factory in Japan. Clinical examinations were conducted in 2009. We obtained a medical history and anthropometric measurements (body weight, body mass index [BMI] and waist circumference) and measured the serum TSH concentrations. The anthropometric indices were compared across serum TSH quartiles. The associations were evaluated separately according to the smoking status in men. RESULTS: The mean body weight (kg), BMI (kg/m(2)) and waist circumference (cm) were 69.2, 23.7 and 83.2 in men and 55.3, 22.3 and 74.3 in women, respectively. Men with a higher TSH concentration had higher body weight and BMI values (p for trend=0.016 and 0.019, respectively), and these significant associations were observed even after adjusting for age, smoking status and other potential confounders. The TSH level was not associated with waist circumference. We found a significant interaction between the TSH level and the smoking status on body weight (p for interaction=0.013) and a significant association between the TSH level and body weight in nonsmokers, but not in current smokers. No significant associations were observed between the TSH level and the anthropometric indices in women. CONCLUSION: Significant positive associations between the serum TSH concentration, body weight and BMI were detected in men only, and an interaction with the smoking status was observed for this association.\n]\n\n\n%\nK\n \nAdult\n\n\n%\nK\n \nBiomarkers\n\n\n%\nK\n \nBody\n \nMass\n \nIndex\n\n\n%\nK\n \nBody\n \nWeight\n\n\n%\nK\n \nCross-Sectional\n \nStudies\n\n\n%\nK\n \nFemale\n\n\n%\nK\n \nHumans\n\n\n%\nK\n \nIncidence\n\n\n%\nK\n \nJapan\n\n\n%\nK\n \nMale\n\n\n%\nK\n \nMiddle\n \nAged\n\n\n%\nK\n \nObesity\n\n\n%\nK\n \nObesity\n\n\n%\nK\n \nObesity\n\n\n%\nK\n \nPrevalence\n\n\n%\nK\n \nPrognosis\n\n\n%\nK\n \nReference\n \nValues\n\n\n%\nK\n \nSurveys\n \nand\n \nQuestionnaires\n\n\n%\nK\n \nThyrotropin\n\n\n%+\n \nDepartment\n \nof\n \nEpidemiology\n \nand\n \nPublic\n \nHealth\n,\n \nKanazawa\n \nMedical\n \nUniversity\n,\n \nJapan\n.\n\n\n\n%\n0\n \nJournal\n \nArticle\n\n\n%\nA\n \nDrenowatz\n,\n \nC\n\n\n%\nA\n \nKobel\n,\n \nS\n\n\n%\nA\n \nKettner\n,\n \nS\n\n\n%\nA\n \nKeszty\n\u00fc\ns\n,\n \nD\n\n\n%\nA\n \nSteinacker\n,\n \nJM\n\n\n%\nD\n \n2014\n\n\n%\nT\n \nInteraction\n \nof\n \nsedentary\n \nbehaviour\n,\n \nsports\n \nparticipation\n \nand\n \nfitness\n \nwith\n \nweight\n \nstatus\n \nin\n \nelementary\n \nschool\n \nchildren\n.\n\n\n%\nJ\n \nEur\n \nJ\n \nSport\n \nSci\n\n\n%\nV\n \n14\n\n\n%\nN\n \n1\n\n\n%\nP\n \n100-5\n\n\n%\nM\n \n24533500\n\n\n%\nU\n \nhttp\n://\nwww\n.\nncbi\n.\nnlm\n.\nnih\n.\ngov\n/\npubmed\n/\n24533500\n\n\n%\nX\n \nString\n[\nEven though the effect of single components contributing to weight gain in children have been addressed only limited research is available on the combined association of sports participation, physical fitness and time spent watching TV with body weight in children. Baseline data from 1594 children (809 male; 785 female), 7.1 \u00b1 0.6 years of age participating in a large school-based intervention in southern Germany was used. Height and weight was measured and body mass index (BMI) percentiles (BMIPCT) were determined accordingly. Sports participation and time spent watching TV was assessed via parent questionnaire while fitness was determined via a composite fitness test. Combined and single associations of sports participation, TV time and fitness with BMIPCT and weight status were assessed via ANCOVA as well as logistic regression analysis, controlling for age and sex. A significant interaction of TV time, sports participation and fitness on BMIPCT occurred, despite low correlations among the three components. Further, there was a combined association of sports participation and TV time on BMIPCT. TV time and fitness were also independently associated with BMIPCT. Similarly, only increased TV time and lower fitness were associated with a higher odds ratio for overweight/obesity. These results underline the complex interaction of TV time, sports participation and fitness with BMIPCT. In children, TV time and fitness have a stronger influence on BMIPCT compared to sports participation. Sports participation, however, may not reflect overall activity levels of children appropriately. More research is necessary to examine the complex interaction of various behaviours and fitness with BMIPCT.\n]\n\n\n%\nK\n \nAnalysis\n \nof\n \nVariance\n\n\n%\nK\n \nBody\n \nMass\n \nIndex\n\n\n%\nK\n \nChild\n\n\n%\nK\n \nExercise\n\n\n%\nK\n \nFemale\n\n\n%\nK\n \nGermany\n\n\n%\nK\n \nHumans\n\n\n%\nK\n \nLogistic\n \nModels\n\n\n%\nK\n \nMale\n\n\n%\nK\n \nOdds\n \nRatio\n\n\n%\nK\n \nOverweight\n\n\n%\nK\n \nPediatric\n \nObesity\n\n\n%\nK\n \nPhysical\n \nFitness\n\n\n%\nK\n \nSedentary\n \nLifestyle\n\n\n%\nK\n \nSports\n\n\n%\nK\n \nSurveys\n \nand\n \nQuestionnaires\n\n\n%\nK\n \nTelevision\n\n\n%\nK\n \nWeight\n \nGain\n\n\n%+\n \na\n \nDivision\n \nof\n \nSport\n \nand\n \nRehabilitation\n \nMedicine\n \n,\n \nUlm\n \nUniversity\n \nMedical\n \nCenter\n \n,\n \nUlm\n \n,\n \nGermany\n.\n\n\n\n%\n0\n \nJournal\n \nArticle\n\n\n%\nA\n \nCavagnolli\n,\n \nDA\n\n\n%\nA\n \nEsteves\n,\n \nAM\n\n\n%\nA\n \nAckel-D\nElia, C\n\n\n%A Maeda, MY\n\n\n%A de Faria, AP\n\n\n%A Tufik, S\n\n\n%A de Mello, MT\n\n\n%D 2014\n\n\n%T Aerobic exercise does not change C-reactive protein levels in non-obese patients with obstructive sleep apnoea.\n\n\n%J Eur J Sport Sci\n\n\n%V 14 Suppl 1\n\n\n%P S142-7\n\n\n%M 24444198\n\n\n%U http://www.ncbi.nlm.nih.gov/pubmed/24444198\n\n\n%X String\n[\nThe aim of this study is to evaluate the effects of a 2-month aerobic exercise training programme on C-reactive protein (CRP) levels in non-obese patients with obstructive sleep apnoea. Twenty non-obese and sedentary adult male volunteers underwent polysomnography (PSG) to assess their sleep parameters. After the PSG analysis, the subjects were divided into two groups (CTRL, control and OSA, obstructive sleep apnoea). Twenty-four sessions of aerobic exercise were performed, and PSG was repeated on the night that followed the last physical training session (24th). Blood samples were collected for CRP analysis before the first exercise session and after the last session. The OSA group demonstrated a reduction in sleep latency (SL) after 2 months of physical exercise, and 80% of them showed a lower apnoea-hypopnoea index (AHI), although this difference was not statistically significant. The differences between the CRP values for the CTRL and OSA groups were also not statistically significant at baseline or after 2 months of physical exercise. Furthermore, there was no correlation between the CRP levels and body mass index (BMI) in the two groups assessed. Our results suggest that in non-obese patients with OSA, CRP levels were normal and did not change after 2 months of aerobic exercise training.\n]\n\n\n%K Adult\n\n\n%K C-Reactive Protein\n\n\n%K Case-Control Studies\n\n\n%K Exercise\n\n\n%K Humans\n\n\n%K Male\n\n\n%K Middle Aged\n\n\n%K Obesity\n\n\n%K Sleep Apnea, Obstructive\n\n\n%K Young Adult\n\n\n%+ a Departamento de Psicobiologia , Universidade Federal de S\u00e3o Paulo , S\u00e3o Paulo , Brazil.\n\n\n\n%0 Journal Article\n\n\n%A Aparicio, VA\n\n\n%A Ortega, FB\n\n\n%A Carbonell-Baeza, A\n\n\n%A Gatto-Cardia, C\n\n\n%A Sj\u00f6str\u00f6m, M\n\n\n%A Ruiz, JR\n\n\n%A Delgado-Fern\u00e1ndez, M\n\n\n%D 2013\n\n\n%T Fibromyalgia\ns\n \nkey\n \nsymptoms\n \nin\n \nnormal-weight\n,\n \noverweight\n,\n \nand\n \nobese\n \nfemale\n \npatients\n.\n\n\n%\nJ\n \nPain\n \nManag\n \nNurs\n\n\n%\nV\n \n14\n\n\n%\nN\n \n4\n\n\n%\nP\n \n268-276\n\n\n%\nM\n \n24315250\n\n\n%\nU\n \nhttp\n://\nwww\n.\nncbi\n.\nnlm\n.\nnih\n.\ngov\n/\npubmed\n/\n24315250\n\n\n%\nX\n \nString\n[\nFactors affecting the symptomatology of fibromyalgia (FM) are not fully understood. The aim of the present study was to analyze the relationship of weight status with pain, fatigue, and stiffness in Spanish female FM patients, with special focus on the differences between overweight and obese patients. The sample comprised 177 Spanish women with FM (51.3 \u00b1 7.3 years old). We assessed tenderness (using pressure algometry), pain and vitality using the General Health Short-Form Survey (SF36), and pain, fatigue, morning tiredness, and stiffness using the Fibromyalgia Impact Questionnaire (FIQ). The international criteria for body mass index was used to classify the patients as normal weight, overweight, or obese. Thirty-two percent were normal-weight, 35% overweight, and 32% obese. Both overweight and obese patients had higher levels of pain than normal-weight patients, as assessed by FIQ and SF36 questionnaires and tender point count (p \n .01). The same pattern was observed for algometer score, yet the differences were not significant. Both overweight and obese patients had higher levels of fatigue, and morning tiredness, and stiffness (p\u00a0\n .05) and less vitality than normal-weight patients. No significant differences were observed in any of the variables studied between overweight and obese patients. In conclusion, FM symptomatology in obese patients did not differ from overweight patients, whereas normal-weight patients significantly differed from overweight and obese patients in the studied symptoms. These findings suggest that keeping a healthy (normal) weight is not only associated with decreased risk for developing FM but might also be\u00a0a relevant and useful way of improving FM symptomatology in women. \n]\n\n\n%\nK\n \nAdult\n\n\n%\nK\n \nBody\n \nMass\n \nIndex\n\n\n%\nK\n \nBody\n \nWeight\n\n\n%\nK\n \nFatigue\n\n\n%\nK\n \nFemale\n\n\n%\nK\n \nFibromyalgia\n\n\n%\nK\n \nHealth\n \nStatus\n\n\n%\nK\n \nHumans\n\n\n%\nK\n \nMiddle\n \nAged\n\n\n%\nK\n \nObesity\n\n\n%\nK\n \nOverweight\n\n\n%\nK\n \nPain\n\n\n%\nK\n \nPain\n \nMeasurement\n\n\n%\nK\n \nQuality\n \nof\n \nLife\n\n\n%\nK\n \nSeverity\n \nof\n \nIllness\n \nIndex\n\n\n%\nK\n \nSurveys\n \nand\n \nQuestionnaires\n\n\n%+\n \nDepartment\n \nof\n \nPhysical\n \nEducation\n \nand\n \nSport\n,\n \nSchool\n \nof\n \nPhysical\n \nActivity\n \nand\n \nSports\n \nSciences\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n;\n \nDepartment\n \nof\n \nBiosciences\n \nand\n \nNutrition\n,\n \nUnit\n \nfor\n \nPreventive\n \nNutrition\n,\n \nNovum\n,\n \nKarolinska\n \nInstitutet\n,\n \nStockholm\n \nSweden\n;\n \nDepartment\n \nof\n \nPhysiology\n \nand\n \nInstitute\n \nof\n \nNutrition\n \nand\n \nFood\n \nTechnology\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n.\n \nElectronic\n \naddress\n:\n \nvirginiaparicio\n@\nugr\n.\nes\n.\n;\n \nDepartment\n \nof\n \nBiosciences\n \nand\n \nNutrition\n,\n \nUnit\n \nfor\n \nPreventive\n \nNutrition\n,\n \nNovum\n,\n \nKarolinska\n \nInstitutet\n,\n \nStockholm\n \nSweden\n;\n \nDepartment\n \nof\n \nPhysiology\n,\n \nSchool\n \nof\n \nMedicine\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n.;\n \nDepartment\n \nof\n \nPhysical\n \nEducation\n \nand\n \nSport\n,\n \nSchool\n \nof\n \nPhysical\n \nActivity\n \nand\n \nSports\n \nSciences\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n;\n \nDepartment\n \nof\n \nPhysical\n \nEducation\n \nand\n \nSport\n,\n \nSchool\n \nof\n \nEducation\n,\n \nUniversity\n \nof\n \nSeville\n,\n \nSeville\n,\n \nSpain\n.;\n \nDepartment\n \nof\n \nPhysical\n \nEducation\n \nand\n \nSport\n,\n \nSchool\n \nof\n \nPhysical\n \nActivity\n \nand\n \nSports\n \nSciences\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n.;\n \nDepartment\n \nof\n \nBiosciences\n \nand\n \nNutrition\n,\n \nUnit\n \nfor\n \nPreventive\n \nNutrition\n,\n \nNovum\n,\n \nKarolinska\n \nInstitutet\n,\n \nStockholm\n \nSweden\n.;\n \nDepartment\n \nof\n \nBiosciences\n \nand\n \nNutrition\n,\n \nUnit\n \nfor\n \nPreventive\n \nNutrition\n,\n \nNovum\n,\n \nKarolinska\n \nInstitutet\n,\n \nStockholm\n \nSweden\n.;\n \nDepartment\n \nof\n \nPhysical\n \nEducation\n \nand\n \nSport\n,\n \nSchool\n \nof\n \nPhysical\n \nActivity\n \nand\n \nSports\n \nSciences\n,\n \nUniversity\n \nof\n \nGranada\n,\n \nGranada\n,\n \nSpain\n.\n\n\n\n\n\n\n\n\nDataFrames\n\n\nReturns a dictionary of dataframes which match the content and structure of the database tables.\n\n\ndfs\n \n=\n \nProcesses\n.\npubmed_search_and_parse\n(\nemail\n,\n \nsearch_term\n,\n \nmax_articles\n,\n \nverbose\n)\n\n\n\n\n\n\nGetting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to dataframes--------\nDict{String,DataFrames.DataFrame} with 8 entries:\n  \nbasic\n               =\n 5\u00d713 DataFrames.DataFrame. Omitted printing of 9 col\u2026\n  \nmesh_desc\n           =\n 52\u00d72 DataFrames.DataFrame\u2026\n  \nmesh_qual\n           =\n 9\u00d72 DataFrames.DataFrame\u2026\n  \npub_type\n            =\n 10\u00d73 DataFrames.DataFrame\u2026\n  \nabstract_full\n       =\n 5\u00d72 DataFrames.DataFrame. Omitted printing of 1 colu\u2026\n  \nauthor_ref\n          =\n 35\u00d78 DataFrames.DataFrame. Omitted printing of 3 col\u2026\n  \nmesh_heading\n        =\n 78\u00d75 DataFrames.DataFrame\u2026\n  \nabstract_structured\n =\n 4\u00d74 DataFrames.DataFrame. Omitted printing of 1 colu\u2026\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "Pubmed Search and Save"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#search-pubmed-and-save-results", 
            "text": "This example demonstrates the typical workflow to query pubmed and store the results. The following backends are supported for storing the results:   MySQL  SQLite  Citation (endnote/bibtex)  DataFrames", 
            "title": "Search PubMed and Save Results"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#set-up", 
            "text": "using   BioMedQuery . DBUtils  using   BioMedQuery . PubMed  using   BioMedQuery . Processes  using   DataFrames  using   MySQL  using   SQLite   Variables used to search PubMed  email   =   ;   # Only needed if you want to contact NCBI with inqueries  search_term   =   (obesity[MeSH Major Topic]) AND ( 2010 [Date - Publication] :  2012 [Date - Publication]) ;  max_articles   =   5 ;  results_dir   =   . ;  verbose   =   true ;", 
            "title": "Set Up"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#mysql-backend", 
            "text": "Initialize database, if it exists it connects to it, otherwise it creates it  const   mysql_conn   =   DBUtils . init_mysql_database ( 127.0.0.1 ,   root ,   ,   pubmed_obesity_2010_2012 );   Creates (and deletes if they already exist) all tables needed to save a pubmed search  PubMed . create_tables! ( mysql_conn );   Search pubmed and save results to database  Processes . pubmed_search_and_save! ( email ,   search_term ,   max_articles ,   mysql_conn ,   verbose )   Getting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to database--------\nSaving 5 articles to database\nFinished searching, total number of articles: 5", 
            "title": "MySQL backend"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#access-all-pmids", 
            "text": "all_pmids ( mysql_conn )   5-element Array{Int32,1}:\n 24315250\n 24444198\n 24533500\n 24694474\n 25548090", 
            "title": "Access all PMIDs"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#explore-tables", 
            "text": "You may use the MySQL command directly. If you want the return type to be a DataFrame, you need to explicitly request so.  tables   =   [ author_ref ,   mesh_desc ,   mesh_qual ,   mesh_heading ]  for   t   in   tables \n     query_str   =   SELECT * FROM  $t  LIMIT 5; \n     q   =   MySQL . query ( mysql_conn ,   query_str ,   DataFrame ) \n     println ( q )  end   5\u00d79 DataFrames.DataFrame. Omitted printing of 3 columns\n\u2502 Row \u2502 pmid     \u2502 last_name \u2502 first_name \u2502 initials \u2502 suffix  \u2502 orcid   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 So        \u2502 Eun Sun    \u2502 ES       \u2502 missing \u2502 missing \u2502\n\u2502 2   \u2502 25548090 \u2502 Yoo       \u2502 Kwang Soo  \u2502 KS       \u2502 missing \u2502 missing \u2502\n\u2502 3   \u2502 24694474 \u2502 Sakurai   \u2502 Masaru     \u2502 M        \u2502 missing \u2502 missing \u2502\n\u2502 4   \u2502 24694474 \u2502 Nakamura  \u2502 Koshi      \u2502 K        \u2502 missing \u2502 missing \u2502\n\u2502 5   \u2502 24694474 \u2502 Miura     \u2502 Katsuyuki  \u2502 K        \u2502 missing \u2502 missing \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid  \u2502 name                 \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 328  \u2502 Adult                \u2502 2018-07-19T15:17:25 \u2502\n\u2502 2   \u2502 368  \u2502 Aged                 \u2502 2018-07-19T15:17:25 \u2502\n\u2502 3   \u2502 369  \u2502 Aged, 80 and over    \u2502 2018-07-19T15:17:25 \u2502\n\u2502 4   \u2502 704  \u2502 Analysis of Variance \u2502 2018-07-19T15:17:25 \u2502\n\u2502 5   \u2502 1835 \u2502 Body Weight          \u2502 2018-07-19T15:17:25 \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid \u2502 name          \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 32  \u2502 analysis      \u2502 2018-07-19T15:17:25 \u2502\n\u2502 2   \u2502 97  \u2502 blood         \u2502 2018-07-19T15:17:25 \u2502\n\u2502 3   \u2502 150 \u2502 complications \u2502 2018-07-19T15:17:25 \u2502\n\u2502 4   \u2502 208 \u2502 ethnology     \u2502 2018-07-19T15:17:25 \u2502\n\u2502 5   \u2502 209 \u2502 etiology      \u2502 2018-07-19T15:17:25 \u2502\n5\u00d76 DataFrames.DataFrame. Omitted printing of 1 columns\n\u2502 Row \u2502 pmid     \u2502 desc_uid \u2502 desc_maj_status \u2502 qual_uid \u2502 qual_maj_status \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 17677    \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 2   \u2502 25548090 \u2502 368      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 3   \u2502 25548090 \u2502 369      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 4   \u2502 25548090 \u2502 5260     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 5   \u2502 25548090 \u2502 6801     \u2502 0               \u2502 missing  \u2502 missing         \u2502  MySQL . disconnect ( mysql_conn );", 
            "title": "Explore tables"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#sqlite-backend", 
            "text": "const   db_path   =   $ ( results_dir ) /pubmed_obesity_2010_2012.db ;   Overwrite the database if it already exists  if   isfile ( db_path ) \n     rm ( db_path )  end   Connect to the database  const   conn_sqlite   =   SQLite . DB ( db_path );   Creates (and deletes if they already exist) all tables needed to save a pubmed search  PubMed . create_tables! ( conn_sqlite );   Search PubMed and save the results  Processes . pubmed_search_and_save! ( email ,   search_term ,   max_articles ,   conn_sqlite ,   verbose )   Getting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to database--------\nSaving 5 articles to database\nFinished searching, total number of articles: 5", 
            "title": "SQLite backend"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#access-all-pmids_1", 
            "text": "all_pmids ( conn_sqlite )   5-element Array{Union{Int64, Missings.Missing},1}:\n 24315250\n 24444198\n 24533500\n 24694474\n 25548090", 
            "title": "Access all PMIDs"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#explore-the-tables", 
            "text": "You may use the SQLite commands directly. The return type is a DataFrame.  tables   =   [ author_ref ,   mesh_desc ,   mesh_qual ,   mesh_heading ]  for   t   in   tables \n     query_str   =   SELECT * FROM  $t  LIMIT 5; \n     q   =   SQLite . query ( conn_sqlite ,   query_str ) \n     println ( q )  end   5\u00d79 DataFrames.DataFrame. Omitted printing of 3 columns\n\u2502 Row \u2502 pmid     \u2502 last_name \u2502 first_name \u2502 initials \u2502 suffix  \u2502 orcid   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 So        \u2502 Eun Sun    \u2502 ES       \u2502 missing \u2502 missing \u2502\n\u2502 2   \u2502 25548090 \u2502 Yoo       \u2502 Kwang Soo  \u2502 KS       \u2502 missing \u2502 missing \u2502\n\u2502 3   \u2502 24694474 \u2502 Sakurai   \u2502 Masaru     \u2502 M        \u2502 missing \u2502 missing \u2502\n\u2502 4   \u2502 24694474 \u2502 Nakamura  \u2502 Koshi      \u2502 K        \u2502 missing \u2502 missing \u2502\n\u2502 5   \u2502 24694474 \u2502 Miura     \u2502 Katsuyuki  \u2502 K        \u2502 missing \u2502 missing \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid   \u2502 name              \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 12016 \u2502 Reference Values  \u2502 2018-07-19 15:17:25 \u2502\n\u2502 2   \u2502 56910 \u2502 Republic of Korea \u2502 2018-07-19 15:17:25 \u2502\n\u2502 3   \u2502 12372 \u2502 ROC Curve         \u2502 2018-07-19 15:17:26 \u2502\n\u2502 4   \u2502 5221  \u2502 Fatigue           \u2502 2018-07-19 15:17:26 \u2502\n\u2502 5   \u2502 9765  \u2502 Obesity           \u2502 2018-07-19 15:17:26 \u2502\n5\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 uid \u2502 name                        \u2502 ins_dt_time         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 208 \u2502 ethnology                   \u2502 2018-07-19 15:17:26 \u2502\n\u2502 2   \u2502 706 \u2502 statistics   numerical data \u2502 2018-07-19 15:17:26 \u2502\n\u2502 3   \u2502 453 \u2502 epidemiology                \u2502 2018-07-19 15:17:26 \u2502\n\u2502 4   \u2502 502 \u2502 physiology                  \u2502 2018-07-19 15:17:26 \u2502\n\u2502 5   \u2502 32  \u2502 analysis                    \u2502 2018-07-19 15:17:26 \u2502\n5\u00d76 DataFrames.DataFrame. Omitted printing of 1 columns\n\u2502 Row \u2502 pmid     \u2502 desc_uid \u2502 desc_maj_status \u2502 qual_uid \u2502 qual_maj_status \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 25548090 \u2502 17677    \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 2   \u2502 25548090 \u2502 368      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 3   \u2502 25548090 \u2502 369      \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 4   \u2502 25548090 \u2502 5260     \u2502 0               \u2502 missing  \u2502 missing         \u2502\n\u2502 5   \u2502 25548090 \u2502 6801     \u2502 0               \u2502 missing  \u2502 missing         \u2502", 
            "title": "Explore the tables"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#citations", 
            "text": "Citation type can be \"endnote\" or \"bibtex\"  enw_file   =   $ ( results_dir ) /pubmed_obesity_2010_2012.enw  endnote_citation   =   PubMed . CitationOutput ( endnote ,   enw_file ,   true )  Processes . pubmed_search_and_save! ( email ,   search_term ,   max_articles ,   endnote_citation ,   verbose );  println ( readstring ( enw_file ))   Getting   5   articles ,   starting   at   index   0  ------ESearch--------  ------EFetch--------  ------Save   to   database--------  Saving   citation   for   5   articles  Finished   searching ,   total   number   of   articles :   5  % 0   Journal   Article  % A   So ,   ES  % A   Yoo ,   KS  % D   2015  % T   Waist   circumference   cutoff   points   for   central   obesity   in   the   Korean   elderly   population .  % J   J   Appl   Gerontol  % V   34  % N   1  % P   102-17  % M   25548090  % U   http :// www . ncbi . nlm . nih . gov / pubmed / 25548090  % X   String [ The aim is to determine the appropriate cutoff values of waist circumference (WC) for an increased risk of the metabolic syndrome in the Korean elderly population. We analyzed the WC cutoff values of four groups divided according to sex and age with a total of 2,224 elderly participants aged 65 years old and above from the Fourth Korean National Health and Nutrition Examination Survey using the receiver operating characteristic curve and multiple logistic regression. The WC cutoff values associated with an increased risk of metabolic syndrome were 89.6 cm for men and 90.5 cm for women for those who were 65 to 74 years old, and 89.9 cm for men and 87.9 cm for women for those who were 75 years old or older. WC cutoff points for estimating metabolic risk are similar in elderly men and women. Age-specific optimal WC cutoff points should be considered especially for elderly women in screening for metabolic syndrome.  ]  % K   Age   Distribution  % K   Aged  % K   Aged ,   80   and   over  % K   Female  % K   Humans  % K   Logistic   Models  % K   Male  % K   Metabolic   Syndrome  % K   Nutrition   Surveys  % K   Obesity ,   Abdominal  % K   ROC   Curve  % K   Republic   of   Korea  % K   Risk   Factors  % K   Sex   Distribution  % K   Waist   Circumference  %+   Chonbuk   National   University ,   South   Korea   soeunjee @ naver . com . ;   Chonbuk   National   University ,   South   Korea .  % 0   Journal   Article  % A   Sakurai ,   M  % A   Nakamura ,   K  % A   Miura ,   K  % A   Yoshita ,   K  % A   Takamura ,   T  % A   Nagasawa ,   SY  % A   Morikawa ,   Y  % A   Ishizaki ,   M  % A   Kido ,   T  % A   Naruse ,   Y  % A   Nakashima ,   M  % A   Nogawa ,   K  % A   Suwazono ,   Y  % A   Nakagawa ,   H  % D   2014  % T   Association   between   a   serum   thyroid-stimulating   hormone   concentration   within   the   normal   range   and   indices   of   obesity   in   Japanese   men   and   women .  % J   Intern .   Med .  % V   53  % N   7  % P   669-74  % M   24694474  % U   http :// www . ncbi . nlm . nih . gov / pubmed / 24694474  % X   String [ OBJECTIVE: This cross-sectional study investigated the associations between the serum thyroid-stimulating hormone (TSH) concentration and indices of obesity in middle-aged Japanese men and women. METHODS: The participants were 2,037 employees (1,044 men and 993 women; age, 36-55 yr) of a metal products factory in Japan. Clinical examinations were conducted in 2009. We obtained a medical history and anthropometric measurements (body weight, body mass index [BMI] and waist circumference) and measured the serum TSH concentrations. The anthropometric indices were compared across serum TSH quartiles. The associations were evaluated separately according to the smoking status in men. RESULTS: The mean body weight (kg), BMI (kg/m(2)) and waist circumference (cm) were 69.2, 23.7 and 83.2 in men and 55.3, 22.3 and 74.3 in women, respectively. Men with a higher TSH concentration had higher body weight and BMI values (p for trend=0.016 and 0.019, respectively), and these significant associations were observed even after adjusting for age, smoking status and other potential confounders. The TSH level was not associated with waist circumference. We found a significant interaction between the TSH level and the smoking status on body weight (p for interaction=0.013) and a significant association between the TSH level and body weight in nonsmokers, but not in current smokers. No significant associations were observed between the TSH level and the anthropometric indices in women. CONCLUSION: Significant positive associations between the serum TSH concentration, body weight and BMI were detected in men only, and an interaction with the smoking status was observed for this association. ]  % K   Adult  % K   Biomarkers  % K   Body   Mass   Index  % K   Body   Weight  % K   Cross-Sectional   Studies  % K   Female  % K   Humans  % K   Incidence  % K   Japan  % K   Male  % K   Middle   Aged  % K   Obesity  % K   Obesity  % K   Obesity  % K   Prevalence  % K   Prognosis  % K   Reference   Values  % K   Surveys   and   Questionnaires  % K   Thyrotropin  %+   Department   of   Epidemiology   and   Public   Health ,   Kanazawa   Medical   University ,   Japan .  % 0   Journal   Article  % A   Drenowatz ,   C  % A   Kobel ,   S  % A   Kettner ,   S  % A   Keszty \u00fc s ,   D  % A   Steinacker ,   JM  % D   2014  % T   Interaction   of   sedentary   behaviour ,   sports   participation   and   fitness   with   weight   status   in   elementary   school   children .  % J   Eur   J   Sport   Sci  % V   14  % N   1  % P   100-5  % M   24533500  % U   http :// www . ncbi . nlm . nih . gov / pubmed / 24533500  % X   String [ Even though the effect of single components contributing to weight gain in children have been addressed only limited research is available on the combined association of sports participation, physical fitness and time spent watching TV with body weight in children. Baseline data from 1594 children (809 male; 785 female), 7.1 \u00b1 0.6 years of age participating in a large school-based intervention in southern Germany was used. Height and weight was measured and body mass index (BMI) percentiles (BMIPCT) were determined accordingly. Sports participation and time spent watching TV was assessed via parent questionnaire while fitness was determined via a composite fitness test. Combined and single associations of sports participation, TV time and fitness with BMIPCT and weight status were assessed via ANCOVA as well as logistic regression analysis, controlling for age and sex. A significant interaction of TV time, sports participation and fitness on BMIPCT occurred, despite low correlations among the three components. Further, there was a combined association of sports participation and TV time on BMIPCT. TV time and fitness were also independently associated with BMIPCT. Similarly, only increased TV time and lower fitness were associated with a higher odds ratio for overweight/obesity. These results underline the complex interaction of TV time, sports participation and fitness with BMIPCT. In children, TV time and fitness have a stronger influence on BMIPCT compared to sports participation. Sports participation, however, may not reflect overall activity levels of children appropriately. More research is necessary to examine the complex interaction of various behaviours and fitness with BMIPCT. ]  % K   Analysis   of   Variance  % K   Body   Mass   Index  % K   Child  % K   Exercise  % K   Female  % K   Germany  % K   Humans  % K   Logistic   Models  % K   Male  % K   Odds   Ratio  % K   Overweight  % K   Pediatric   Obesity  % K   Physical   Fitness  % K   Sedentary   Lifestyle  % K   Sports  % K   Surveys   and   Questionnaires  % K   Television  % K   Weight   Gain  %+   a   Division   of   Sport   and   Rehabilitation   Medicine   ,   Ulm   University   Medical   Center   ,   Ulm   ,   Germany .  % 0   Journal   Article  % A   Cavagnolli ,   DA  % A   Esteves ,   AM  % A   Ackel-D Elia, C  %A Maeda, MY  %A de Faria, AP  %A Tufik, S  %A de Mello, MT  %D 2014  %T Aerobic exercise does not change C-reactive protein levels in non-obese patients with obstructive sleep apnoea.  %J Eur J Sport Sci  %V 14 Suppl 1  %P S142-7  %M 24444198  %U http://www.ncbi.nlm.nih.gov/pubmed/24444198  %X String [ The aim of this study is to evaluate the effects of a 2-month aerobic exercise training programme on C-reactive protein (CRP) levels in non-obese patients with obstructive sleep apnoea. Twenty non-obese and sedentary adult male volunteers underwent polysomnography (PSG) to assess their sleep parameters. After the PSG analysis, the subjects were divided into two groups (CTRL, control and OSA, obstructive sleep apnoea). Twenty-four sessions of aerobic exercise were performed, and PSG was repeated on the night that followed the last physical training session (24th). Blood samples were collected for CRP analysis before the first exercise session and after the last session. The OSA group demonstrated a reduction in sleep latency (SL) after 2 months of physical exercise, and 80% of them showed a lower apnoea-hypopnoea index (AHI), although this difference was not statistically significant. The differences between the CRP values for the CTRL and OSA groups were also not statistically significant at baseline or after 2 months of physical exercise. Furthermore, there was no correlation between the CRP levels and body mass index (BMI) in the two groups assessed. Our results suggest that in non-obese patients with OSA, CRP levels were normal and did not change after 2 months of aerobic exercise training. ]  %K Adult  %K C-Reactive Protein  %K Case-Control Studies  %K Exercise  %K Humans  %K Male  %K Middle Aged  %K Obesity  %K Sleep Apnea, Obstructive  %K Young Adult  %+ a Departamento de Psicobiologia , Universidade Federal de S\u00e3o Paulo , S\u00e3o Paulo , Brazil.  %0 Journal Article  %A Aparicio, VA  %A Ortega, FB  %A Carbonell-Baeza, A  %A Gatto-Cardia, C  %A Sj\u00f6str\u00f6m, M  %A Ruiz, JR  %A Delgado-Fern\u00e1ndez, M  %D 2013  %T Fibromyalgia s   key   symptoms   in   normal-weight ,   overweight ,   and   obese   female   patients .  % J   Pain   Manag   Nurs  % V   14  % N   4  % P   268-276  % M   24315250  % U   http :// www . ncbi . nlm . nih . gov / pubmed / 24315250  % X   String [ Factors affecting the symptomatology of fibromyalgia (FM) are not fully understood. The aim of the present study was to analyze the relationship of weight status with pain, fatigue, and stiffness in Spanish female FM patients, with special focus on the differences between overweight and obese patients. The sample comprised 177 Spanish women with FM (51.3 \u00b1 7.3 years old). We assessed tenderness (using pressure algometry), pain and vitality using the General Health Short-Form Survey (SF36), and pain, fatigue, morning tiredness, and stiffness using the Fibromyalgia Impact Questionnaire (FIQ). The international criteria for body mass index was used to classify the patients as normal weight, overweight, or obese. Thirty-two percent were normal-weight, 35% overweight, and 32% obese. Both overweight and obese patients had higher levels of pain than normal-weight patients, as assessed by FIQ and SF36 questionnaires and tender point count (p   .01). The same pattern was observed for algometer score, yet the differences were not significant. Both overweight and obese patients had higher levels of fatigue, and morning tiredness, and stiffness (p\u00a0  .05) and less vitality than normal-weight patients. No significant differences were observed in any of the variables studied between overweight and obese patients. In conclusion, FM symptomatology in obese patients did not differ from overweight patients, whereas normal-weight patients significantly differed from overweight and obese patients in the studied symptoms. These findings suggest that keeping a healthy (normal) weight is not only associated with decreased risk for developing FM but might also be\u00a0a relevant and useful way of improving FM symptomatology in women.  ]  % K   Adult  % K   Body   Mass   Index  % K   Body   Weight  % K   Fatigue  % K   Female  % K   Fibromyalgia  % K   Health   Status  % K   Humans  % K   Middle   Aged  % K   Obesity  % K   Overweight  % K   Pain  % K   Pain   Measurement  % K   Quality   of   Life  % K   Severity   of   Illness   Index  % K   Surveys   and   Questionnaires  %+   Department   of   Physical   Education   and   Sport ,   School   of   Physical   Activity   and   Sports   Sciences ,   University   of   Granada ,   Granada ,   Spain ;   Department   of   Biosciences   and   Nutrition ,   Unit   for   Preventive   Nutrition ,   Novum ,   Karolinska   Institutet ,   Stockholm   Sweden ;   Department   of   Physiology   and   Institute   of   Nutrition   and   Food   Technology ,   University   of   Granada ,   Granada ,   Spain .   Electronic   address :   virginiaparicio @ ugr . es . ;   Department   of   Biosciences   and   Nutrition ,   Unit   for   Preventive   Nutrition ,   Novum ,   Karolinska   Institutet ,   Stockholm   Sweden ;   Department   of   Physiology ,   School   of   Medicine ,   University   of   Granada ,   Granada ,   Spain .;   Department   of   Physical   Education   and   Sport ,   School   of   Physical   Activity   and   Sports   Sciences ,   University   of   Granada ,   Granada ,   Spain ;   Department   of   Physical   Education   and   Sport ,   School   of   Education ,   University   of   Seville ,   Seville ,   Spain .;   Department   of   Physical   Education   and   Sport ,   School   of   Physical   Activity   and   Sports   Sciences ,   University   of   Granada ,   Granada ,   Spain .;   Department   of   Biosciences   and   Nutrition ,   Unit   for   Preventive   Nutrition ,   Novum ,   Karolinska   Institutet ,   Stockholm   Sweden .;   Department   of   Biosciences   and   Nutrition ,   Unit   for   Preventive   Nutrition ,   Novum ,   Karolinska   Institutet ,   Stockholm   Sweden .;   Department   of   Physical   Education   and   Sport ,   School   of   Physical   Activity   and   Sports   Sciences ,   University   of   Granada ,   Granada ,   Spain .", 
            "title": "Citations"
        }, 
        {
            "location": "/examples/1_pubmed_search_and_save/#dataframes", 
            "text": "Returns a dictionary of dataframes which match the content and structure of the database tables.  dfs   =   Processes . pubmed_search_and_parse ( email ,   search_term ,   max_articles ,   verbose )   Getting 5 articles, starting at index 0\n------ESearch--------\n------EFetch--------\n------Save to dataframes--------\nDict{String,DataFrames.DataFrame} with 8 entries:\n   basic                =  5\u00d713 DataFrames.DataFrame. Omitted printing of 9 col\u2026\n   mesh_desc            =  52\u00d72 DataFrames.DataFrame\u2026\n   mesh_qual            =  9\u00d72 DataFrames.DataFrame\u2026\n   pub_type             =  10\u00d73 DataFrames.DataFrame\u2026\n   abstract_full        =  5\u00d72 DataFrames.DataFrame. Omitted printing of 1 colu\u2026\n   author_ref           =  35\u00d78 DataFrames.DataFrame. Omitted printing of 3 col\u2026\n   mesh_heading         =  78\u00d75 DataFrames.DataFrame\u2026\n   abstract_structured  =  4\u00d74 DataFrames.DataFrame. Omitted printing of 1 colu\u2026  This page was generated using  Literate.jl .", 
            "title": "DataFrames"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/", 
            "text": "Map Medical Subject Headings (MeSH) to UMLS\n\n\n\n\nThis example demonstrates the typical workflow to populate a MESH2UMLS database table relating all concepts associated with all MeSH terms in the input database.\n\n\nThe following backends are supported for storing the results:\n\n\n\n\nMySQL\n\n\nSQLite\n\n\n\n\n\n\nSet Up\n\n\nusing\n \nSQLite\n\n\nusing\n \nMySQL\n\n\nusing\n \nBioMedQuery\n.\nDBUtils\n\n\nusing\n \nBioMedQuery\n.\nProcesses\n\n\nusing\n \nBioServices\n.\nUMLS\n\n\n\n\n\n\nCredentials are environment variables (e.g set in your .juliarc.jl)\n\n\numls_user\n \n=\n \nENV\n[\nUMLS_USER\n];\n\n\numls_pswd\n \n=\n \nENV\n[\nUMLS_PSSWD\n];\n\n\n\nresults_dir\n \n=\n \n.\n;\n\n\n\n\n\n\n\n\nUsing MySQL as a backend\n\n\nNote: this example reuses the MySQL DB from the PubMed Search and Save example.\n\n\nCreate MySQL DB connection\n\n\nhost\n \n=\n \n127.0.0.1\n;\n\n\nmysql_usr\n \n=\n \nroot\n;\n\n\nmysql_pswd\n \n=\n \n;\n\n\ndbname\n \n=\n \npubmed_obesity_2010_2012\n;\n\n\n\ndb_mysql\n \n=\n \nMySQL\n.\nconnect\n(\nhost\n,\n \nmysql_usr\n,\n \nmysql_pswd\n,\n \ndb\n \n=\n \ndbname\n);\n\n\n\n\n\n\nMap MeSH to UMLS\n\n\n@time\n \nmap_mesh_to_umls_async!\n(\ndb_mysql\n,\n \numls_user\n,\n \numls_pswd\n;\n \nappend_results\n=\nfalse\n,\n \ntimeout\n=\n3\n);\n\n\n\n\n\n\n----------Matching MESH to UMLS-----------\nString[\nAdult\n, \nAged\n, \nAged, 80 and over\n, \nAnalysis of Variance\n, \nBody Weight\n, \nC-Reactive Protein\n, \nChild\n, \nCross-Sectional Studies\n, \nFatigue\n, \nFemale\n, \nFibromyalgia\n, \nGermany\n, \nHealth Status\n, \nHumans\n, \nJapan\n, \nMale\n, \nMiddle Aged\n, \nNutrition Surveys\n, \nObesity\n, \nPain\n, \nPain Measurement\n, \nPhysical Fitness\n, \nPrognosis\n, \nQuality of Life\n, \nSurveys and Questionnaires\n, \nReference Values\n, \nRisk Factors\n, \nROC Curve\n, \nSeverity of Illness Index\n, \nSports\n, \nTelevision\n, \nThyrotropin\n, \nBiomarkers\n, \nWeight Gain\n, \nExercise\n, \nBody Mass Index\n, \nIncidence\n, \nPrevalence\n, \nLogistic Models\n, \nOdds Ratio\n, \nCase-Control Studies\n, \nAge Distribution\n, \nSex Distribution\n, \nSleep Apnea, Obstructive\n, \nMetabolic Syndrome\n, \nOverweight\n, \nWaist Circumference\n, \nYoung Adult\n, \nObesity, Abdominal\n, \nRepublic of Korea\n, \nSedentary Lifestyle\n, \nPediatric Obesity\n]\nINFO: UTS: Requesting new TGT\nINFO: Descriptor 14 out of 52: Humans\nINFO: Descriptor 13 out of 52: Health Status\nINFO: Descriptor 15 out of 52: Japan\nINFO: Descriptor 2 out of 52: Aged\nINFO: Descriptor 11 out of 52: Fibromyalgia\nINFO: Descriptor 19 out of 52: Obesity\nINFO: Descriptor 4 out of 52: Analysis of Variance\nINFO: Descriptor 5 out of 52: Body Weight\nINFO: Descriptor 3 out of 52: Aged, 80 and over\nINFO: Descriptor 10 out of 52: Female\nINFO: Descriptor 9 out of 52: Fatigue\nINFO: Descriptor 17 out of 52: Middle Aged\nINFO: Descriptor 21 out of 52: Pain Measurement\nINFO: Descriptor 29 out of 52: Severity of Illness Index\nINFO: Descriptor 31 out of 52: Television\nINFO: Descriptor 23 out of 52: Prognosis\nINFO: Descriptor 26 out of 52: Reference Values\nINFO: Descriptor 32 out of 52: Thyrotropin\nINFO: Descriptor 36 out of 52: Body Mass Index\nINFO: Descriptor 41 out of 52: Case-Control Studies\nINFO: Descriptor 30 out of 52: Sports\nINFO: Descriptor 44 out of 52: Sleep Apnea, Obstructive\nINFO: Descriptor 45 out of 52: Metabolic Syndrome\nINFO: Descriptor 46 out of 52: Overweight\nINFO: Descriptor 47 out of 52: Waist Circumference\nINFO: Descriptor 48 out of 52: Young Adult\nINFO: Descriptor 49 out of 52: Obesity, Abdominal\nINFO: Descriptor 1 out of 52: Adult\nINFO: Descriptor 18 out of 52: Nutrition Surveys\nINFO: Descriptor 25 out of 52: Surveys and Questionnaires\nINFO: Descriptor 42 out of 52: Age Distribution\nINFO: Descriptor 8 out of 52: Cross-Sectional Studies\nINFO: Descriptor 16 out of 52: Male\nINFO: Descriptor 24 out of 52: Quality of Life\nINFO: Descriptor 39 out of 52: Logistic Models\nINFO: Descriptor 35 out of 52: Exercise\nINFO: Descriptor 6 out of 52: C-Reactive Protein\nINFO: Descriptor 50 out of 52: Republic of Korea\nINFO: Descriptor 12 out of 52: Germany\nINFO: Descriptor 43 out of 52: Sex Distribution\nINFO: Descriptor 20 out of 52: Pain\nINFO: Descriptor 38 out of 52: Prevalence\nINFO: Descriptor 7 out of 52: Child\nINFO: Descriptor 27 out of 52: Risk Factors\nINFO: Descriptor 40 out of 52: Odds Ratio\nINFO: Descriptor 28 out of 52: ROC Curve\nINFO: Descriptor 22 out of 52: Physical Fitness\nINFO: Descriptor 34 out of 52: Weight Gain\nINFO: Descriptor 37 out of 52: Incidence\nINFO: Descriptor 33 out of 52: Biomarkers\nINFO: Descriptor 51 out of 52: Sedentary Lifestyle\nINFO: Descriptor 51 out of 52: Sedentary Lifestyle\nINFO: Descriptor 52 out of 52: Pediatric Obesity\n 63.313961 seconds (645.62 k allocations: 33.005 MiB, 0.02% gc time)\n\n\n\n\n\n\n\nExplore the output table\n\n\ndb_query\n(\ndb_mysql\n,\n \nSELECT * FROM mesh2umls\n)\n\n\n\n\n\n\n56\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 mesh                       \u2502 umls                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 Adult                      \u2502 Age Group                       \u2502\n\u2502 2   \u2502 Age Distribution           \u2502 Quantitative Concept            \u2502\n\u2502 3   \u2502 Aged                       \u2502 Organism Attribute              \u2502\n\u2502 4   \u2502 Aged, 80 and over          \u2502 Age Group                       \u2502\n\u2502 5   \u2502 Analysis of Variance       \u2502 Quantitative Concept            \u2502\n\u2502 6   \u2502 Biomarkers                 \u2502 Clinical Attribute              \u2502\n\u2502 7   \u2502 Body Mass Index            \u2502 Diagnostic Procedure            \u2502\n\u2502 8   \u2502 Body Weight                \u2502 Organism Attribute              \u2502\n\u22ee\n\u2502 48  \u2502 Sports                     \u2502 Daily or Recreational Activity  \u2502\n\u2502 49  \u2502 Surveys and Questionnaires \u2502 Research Activity               \u2502\n\u2502 50  \u2502 Television                 \u2502 Manufactured Object             \u2502\n\u2502 51  \u2502 Thyrotropin                \u2502 Amino Acid, Peptide, or Protein \u2502\n\u2502 52  \u2502 Thyrotropin                \u2502 Hormone                         \u2502\n\u2502 53  \u2502 Thyrotropin                \u2502 Pharmacologic Substance         \u2502\n\u2502 54  \u2502 Waist Circumference        \u2502 Clinical Attribute              \u2502\n\u2502 55  \u2502 Weight Gain                \u2502 Finding                         \u2502\n\u2502 56  \u2502 Young Adult                \u2502 Age Group                       \u2502\n\n\n\n\n\n\n\nUsing SQLite as a backend\n\n\nNote: this example reuses the MySQL DB from the PubMed Search and Save example.\n\n\nCreate SQLite DB connection\n\n\ndb_path\n \n=\n \n$\n(\nresults_dir\n)\n/pubmed_obesity_2010_2012.db\n;\n\n\ndb_sqlite\n \n=\n \nSQLite\n.\nDB\n(\ndb_path\n);\n\n\n\n\n\n\nMap MeSH to UMLS\n\n\n```@example 2_pubmed_mesh_to_umls_map\n@time map_mesh_to_umls_async!(db_sqlite, umls_user, umls_pswd; append_results=false, timeout=3);\n\n\na\n \nid=\nExplore-the-output-table-2\n/a\n\n\n#### Explore the output table\n\n\n```julia\ndb_query(db_sqlite, \nSELECT * FROM mesh2umls;\n)\n\n\n\n\n\n0\u00d72 DataFrames.DataFrame\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "MeSH/UMLS Map"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/#map-medical-subject-headings-mesh-to-umls", 
            "text": "This example demonstrates the typical workflow to populate a MESH2UMLS database table relating all concepts associated with all MeSH terms in the input database.  The following backends are supported for storing the results:   MySQL  SQLite", 
            "title": "Map Medical Subject Headings (MeSH) to UMLS"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/#set-up", 
            "text": "using   SQLite  using   MySQL  using   BioMedQuery . DBUtils  using   BioMedQuery . Processes  using   BioServices . UMLS   Credentials are environment variables (e.g set in your .juliarc.jl)  umls_user   =   ENV [ UMLS_USER ];  umls_pswd   =   ENV [ UMLS_PSSWD ];  results_dir   =   . ;", 
            "title": "Set Up"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/#using-mysql-as-a-backend", 
            "text": "Note: this example reuses the MySQL DB from the PubMed Search and Save example.  Create MySQL DB connection  host   =   127.0.0.1 ;  mysql_usr   =   root ;  mysql_pswd   =   ;  dbname   =   pubmed_obesity_2010_2012 ;  db_mysql   =   MySQL . connect ( host ,   mysql_usr ,   mysql_pswd ,   db   =   dbname );   Map MeSH to UMLS  @time   map_mesh_to_umls_async! ( db_mysql ,   umls_user ,   umls_pswd ;   append_results = false ,   timeout = 3 );   ----------Matching MESH to UMLS-----------\nString[ Adult ,  Aged ,  Aged, 80 and over ,  Analysis of Variance ,  Body Weight ,  C-Reactive Protein ,  Child ,  Cross-Sectional Studies ,  Fatigue ,  Female ,  Fibromyalgia ,  Germany ,  Health Status ,  Humans ,  Japan ,  Male ,  Middle Aged ,  Nutrition Surveys ,  Obesity ,  Pain ,  Pain Measurement ,  Physical Fitness ,  Prognosis ,  Quality of Life ,  Surveys and Questionnaires ,  Reference Values ,  Risk Factors ,  ROC Curve ,  Severity of Illness Index ,  Sports ,  Television ,  Thyrotropin ,  Biomarkers ,  Weight Gain ,  Exercise ,  Body Mass Index ,  Incidence ,  Prevalence ,  Logistic Models ,  Odds Ratio ,  Case-Control Studies ,  Age Distribution ,  Sex Distribution ,  Sleep Apnea, Obstructive ,  Metabolic Syndrome ,  Overweight ,  Waist Circumference ,  Young Adult ,  Obesity, Abdominal ,  Republic of Korea ,  Sedentary Lifestyle ,  Pediatric Obesity ]\nINFO: UTS: Requesting new TGT\nINFO: Descriptor 14 out of 52: Humans\nINFO: Descriptor 13 out of 52: Health Status\nINFO: Descriptor 15 out of 52: Japan\nINFO: Descriptor 2 out of 52: Aged\nINFO: Descriptor 11 out of 52: Fibromyalgia\nINFO: Descriptor 19 out of 52: Obesity\nINFO: Descriptor 4 out of 52: Analysis of Variance\nINFO: Descriptor 5 out of 52: Body Weight\nINFO: Descriptor 3 out of 52: Aged, 80 and over\nINFO: Descriptor 10 out of 52: Female\nINFO: Descriptor 9 out of 52: Fatigue\nINFO: Descriptor 17 out of 52: Middle Aged\nINFO: Descriptor 21 out of 52: Pain Measurement\nINFO: Descriptor 29 out of 52: Severity of Illness Index\nINFO: Descriptor 31 out of 52: Television\nINFO: Descriptor 23 out of 52: Prognosis\nINFO: Descriptor 26 out of 52: Reference Values\nINFO: Descriptor 32 out of 52: Thyrotropin\nINFO: Descriptor 36 out of 52: Body Mass Index\nINFO: Descriptor 41 out of 52: Case-Control Studies\nINFO: Descriptor 30 out of 52: Sports\nINFO: Descriptor 44 out of 52: Sleep Apnea, Obstructive\nINFO: Descriptor 45 out of 52: Metabolic Syndrome\nINFO: Descriptor 46 out of 52: Overweight\nINFO: Descriptor 47 out of 52: Waist Circumference\nINFO: Descriptor 48 out of 52: Young Adult\nINFO: Descriptor 49 out of 52: Obesity, Abdominal\nINFO: Descriptor 1 out of 52: Adult\nINFO: Descriptor 18 out of 52: Nutrition Surveys\nINFO: Descriptor 25 out of 52: Surveys and Questionnaires\nINFO: Descriptor 42 out of 52: Age Distribution\nINFO: Descriptor 8 out of 52: Cross-Sectional Studies\nINFO: Descriptor 16 out of 52: Male\nINFO: Descriptor 24 out of 52: Quality of Life\nINFO: Descriptor 39 out of 52: Logistic Models\nINFO: Descriptor 35 out of 52: Exercise\nINFO: Descriptor 6 out of 52: C-Reactive Protein\nINFO: Descriptor 50 out of 52: Republic of Korea\nINFO: Descriptor 12 out of 52: Germany\nINFO: Descriptor 43 out of 52: Sex Distribution\nINFO: Descriptor 20 out of 52: Pain\nINFO: Descriptor 38 out of 52: Prevalence\nINFO: Descriptor 7 out of 52: Child\nINFO: Descriptor 27 out of 52: Risk Factors\nINFO: Descriptor 40 out of 52: Odds Ratio\nINFO: Descriptor 28 out of 52: ROC Curve\nINFO: Descriptor 22 out of 52: Physical Fitness\nINFO: Descriptor 34 out of 52: Weight Gain\nINFO: Descriptor 37 out of 52: Incidence\nINFO: Descriptor 33 out of 52: Biomarkers\nINFO: Descriptor 51 out of 52: Sedentary Lifestyle\nINFO: Descriptor 51 out of 52: Sedentary Lifestyle\nINFO: Descriptor 52 out of 52: Pediatric Obesity\n 63.313961 seconds (645.62 k allocations: 33.005 MiB, 0.02% gc time)", 
            "title": "Using MySQL as a backend"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/#explore-the-output-table", 
            "text": "db_query ( db_mysql ,   SELECT * FROM mesh2umls )   56\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 mesh                       \u2502 umls                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 Adult                      \u2502 Age Group                       \u2502\n\u2502 2   \u2502 Age Distribution           \u2502 Quantitative Concept            \u2502\n\u2502 3   \u2502 Aged                       \u2502 Organism Attribute              \u2502\n\u2502 4   \u2502 Aged, 80 and over          \u2502 Age Group                       \u2502\n\u2502 5   \u2502 Analysis of Variance       \u2502 Quantitative Concept            \u2502\n\u2502 6   \u2502 Biomarkers                 \u2502 Clinical Attribute              \u2502\n\u2502 7   \u2502 Body Mass Index            \u2502 Diagnostic Procedure            \u2502\n\u2502 8   \u2502 Body Weight                \u2502 Organism Attribute              \u2502\n\u22ee\n\u2502 48  \u2502 Sports                     \u2502 Daily or Recreational Activity  \u2502\n\u2502 49  \u2502 Surveys and Questionnaires \u2502 Research Activity               \u2502\n\u2502 50  \u2502 Television                 \u2502 Manufactured Object             \u2502\n\u2502 51  \u2502 Thyrotropin                \u2502 Amino Acid, Peptide, or Protein \u2502\n\u2502 52  \u2502 Thyrotropin                \u2502 Hormone                         \u2502\n\u2502 53  \u2502 Thyrotropin                \u2502 Pharmacologic Substance         \u2502\n\u2502 54  \u2502 Waist Circumference        \u2502 Clinical Attribute              \u2502\n\u2502 55  \u2502 Weight Gain                \u2502 Finding                         \u2502\n\u2502 56  \u2502 Young Adult                \u2502 Age Group                       \u2502", 
            "title": "Explore the output table"
        }, 
        {
            "location": "/examples/2_pubmed_mesh_to_umls_map/#using-sqlite-as-a-backend", 
            "text": "Note: this example reuses the MySQL DB from the PubMed Search and Save example.  Create SQLite DB connection  db_path   =   $ ( results_dir ) /pubmed_obesity_2010_2012.db ;  db_sqlite   =   SQLite . DB ( db_path );   Map MeSH to UMLS  ```@example 2_pubmed_mesh_to_umls_map\n@time map_mesh_to_umls_async!(db_sqlite, umls_user, umls_pswd; append_results=false, timeout=3);  a   id= Explore-the-output-table-2 /a \n\n#### Explore the output table\n\n\n```julia\ndb_query(db_sqlite,  SELECT * FROM mesh2umls; )  0\u00d72 DataFrames.DataFrame  This page was generated using  Literate.jl .", 
            "title": "Using SQLite as a backend"
        }, 
        {
            "location": "/examples/3_umls_semantic_occurrences/", 
            "text": "Unified Medical Language (UMLS) Filtering\n\n\n\n\nThis example demonstrates how to obtain an occurrence matrix associated with a UMLS concept in a previously obtained pubmed/medline search.\n\n\nNote:\n This example uses the database created and updated by:\n\n\n\n\nExamples / Pubmed Search and Save\n\n\nExmaples / MeSH/UMLS Map\n\n\n\n\nThe following backends are supported for retieving the prior information:\n\n\n\n\nMySQL\n\n\nSQLite\n\n\n\n\n\n\nSet Up\n\n\nusing\n \nBioMedQuery\n.\nProcesses\n\n\nusing\n \nBioMedQuery\n.\nPubMed\n\n\nusing\n \nMySQL\n\n\nusing\n \nSQLite\n\n\n\nresults_dir\n \n=\n \n.\n;\n\n\numls_concept\n \n=\n \nDisease or Syndrome\n;\n\n\n\n\n\n\n\n\nMySQL backend\n\n\nConnecting to MySQL database that was created in pubmed_search_and_save example\n\n\nhost\n \n=\n \n127.0.0.1\n;\n\n\nmysql_usr\n \n=\n \nroot\n;\n\n\nmysql_pswd\n \n=\n \n;\n\n\ndbname\n \n=\n \npubmed_obesity_2010_2012\n;\n\n\n\ndb_mysql\n \n=\n \nMySQL\n.\nconnect\n(\nhost\n,\n \nmysql_usr\n,\n \nmysql_pswd\n,\n \ndb\n=\ndbname\n);\n\n\n\n\n\n\nGetting the descriptor to index dictionary and the occurence matrix\n\n\n@time\n \nlabels2ind\n,\n \noccur\n \n=\n \numls_semantic_occurrences\n(\ndb_mysql\n,\n \numls_concept\n);\n\n\n\n\n\n\nFilter mesh query string : SELECT mesh FROM mesh2umls WHERE umls IN ( \nDisease or Syndrome\n )\n-------------------------------------------------------------\nFound 5 articles with valid descriptors\n-------------------------------------------------------------\n  0.004752 seconds (2.62 k allocations: 163.453 KiB)\n\n\n\n\n\nDescriptor to Index Dictionary\n\n\nlabels2ind\n\n\n\n\n\n\nDict{String,Int64} with 5 entries:\n  \nObesity\n                  =\n 1\n  \nPediatric Obesity\n        =\n 2\n  \nSleep Apnea, Obstructive\n =\n 3\n  \nMetabolic Syndrome\n       =\n 4\n  \nFibromyalgia\n             =\n 5\n\n\n\n\n\nOutput Data Matrix\n\n\nfull\n(\noccur\n)\n\n\n\n\n\n\n5\u00d75 Array{Float64,2}:\n 1.0  1.0  0.0  1.0  0.0\n 0.0  0.0  1.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0\n 1.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n\n\nSQLite backend\n\n\nConnecting to SQLite database that was created in pubmed_search_and_save example\n\n\ndb_path\n \n=\n \n$\n(\nresults_dir\n)\n/pubmed_obesity_2010_2012.db\n;\n\n\ndb_sqlite\n \n=\n \nSQLite\n.\nDB\n(\ndb_path\n);\n\n\n\n\n\n\nGetting the descriptor to index dictionary and occurence matrix\n\n\n```@example 3_umls_semantic_occurrences\n@time labels2ind, occur = umls_semantic_occurrences(db_sqlite, umls_concept);\n\n\nDescriptor to Index Dictionary\n\n\n```julia\nlabels2ind\n\n\n\n\n\nDict{String,Int64} with 5 entries:\n  \nObesity\n                  =\n 1\n  \nPediatric Obesity\n        =\n 2\n  \nSleep Apnea, Obstructive\n =\n 3\n  \nMetabolic Syndrome\n       =\n 4\n  \nFibromyalgia\n             =\n 5\n\n\n\n\n\nOutput Data Matrix\n\n\nfull\n(\noccur\n)\n\n\n\n\n\n\n5\u00d75 Array{Float64,2}:\n 1.0  1.0  0.0  1.0  0.0\n 0.0  0.0  1.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0\n 1.0  0.0  0.0  0.0  0.0\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "UMLS Semantic Filtering"
        }, 
        {
            "location": "/examples/3_umls_semantic_occurrences/#unified-medical-language-umls-filtering", 
            "text": "This example demonstrates how to obtain an occurrence matrix associated with a UMLS concept in a previously obtained pubmed/medline search.  Note:  This example uses the database created and updated by:   Examples / Pubmed Search and Save  Exmaples / MeSH/UMLS Map   The following backends are supported for retieving the prior information:   MySQL  SQLite", 
            "title": "Unified Medical Language (UMLS) Filtering"
        }, 
        {
            "location": "/examples/3_umls_semantic_occurrences/#set-up", 
            "text": "using   BioMedQuery . Processes  using   BioMedQuery . PubMed  using   MySQL  using   SQLite  results_dir   =   . ;  umls_concept   =   Disease or Syndrome ;", 
            "title": "Set Up"
        }, 
        {
            "location": "/examples/3_umls_semantic_occurrences/#mysql-backend", 
            "text": "Connecting to MySQL database that was created in pubmed_search_and_save example  host   =   127.0.0.1 ;  mysql_usr   =   root ;  mysql_pswd   =   ;  dbname   =   pubmed_obesity_2010_2012 ;  db_mysql   =   MySQL . connect ( host ,   mysql_usr ,   mysql_pswd ,   db = dbname );   Getting the descriptor to index dictionary and the occurence matrix  @time   labels2ind ,   occur   =   umls_semantic_occurrences ( db_mysql ,   umls_concept );   Filter mesh query string : SELECT mesh FROM mesh2umls WHERE umls IN (  Disease or Syndrome  )\n-------------------------------------------------------------\nFound 5 articles with valid descriptors\n-------------------------------------------------------------\n  0.004752 seconds (2.62 k allocations: 163.453 KiB)  Descriptor to Index Dictionary  labels2ind   Dict{String,Int64} with 5 entries:\n   Obesity                   =  1\n   Pediatric Obesity         =  2\n   Sleep Apnea, Obstructive  =  3\n   Metabolic Syndrome        =  4\n   Fibromyalgia              =  5  Output Data Matrix  full ( occur )   5\u00d75 Array{Float64,2}:\n 1.0  1.0  0.0  1.0  0.0\n 0.0  0.0  1.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0\n 1.0  0.0  0.0  0.0  0.0", 
            "title": "MySQL backend"
        }, 
        {
            "location": "/examples/3_umls_semantic_occurrences/#sqlite-backend", 
            "text": "Connecting to SQLite database that was created in pubmed_search_and_save example  db_path   =   $ ( results_dir ) /pubmed_obesity_2010_2012.db ;  db_sqlite   =   SQLite . DB ( db_path );   Getting the descriptor to index dictionary and occurence matrix  ```@example 3_umls_semantic_occurrences\n@time labels2ind, occur = umls_semantic_occurrences(db_sqlite, umls_concept);  Descriptor to Index Dictionary\n\n\n```julia\nlabels2ind  Dict{String,Int64} with 5 entries:\n   Obesity                   =  1\n   Pediatric Obesity         =  2\n   Sleep Apnea, Obstructive  =  3\n   Metabolic Syndrome        =  4\n   Fibromyalgia              =  5  Output Data Matrix  full ( occur )   5\u00d75 Array{Float64,2}:\n 1.0  1.0  0.0  1.0  0.0\n 0.0  0.0  1.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0\n 1.0  0.0  0.0  0.0  0.0  This page was generated using  Literate.jl .", 
            "title": "SQLite backend"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/", 
            "text": "Export PubMed Citations\n\n\n BioMedQuery has functions to search PubMed for PMIDs and save the xml data as either a BibTex or EndNote citation.\n\n\nHere we export EndNote/BibTex citations from a PMID or a list of PMIDs. If you need to search Entrez/PubMed and save the results as citations, refer to Examples / PubMed Search and Save.\n\n\n\n\nSet Up\n\n\nusing\n \nBioMedQuery\n.\nProcesses\n\n\n\n\n\n\nThe functions require a directory to save the citation files to\n\n\nresults_dir\n \n=\n \n.\n;\n\n\n\nif\n \n!\nisdir\n(\nresults_dir\n)\n\n     \nmkdir\n(\nresults_dir\n)\n\n\nend\n\n\n\n\n\n\nFor this example, the below PMIDs are searched and saved as citations\n\n\npmid\n \n=\n \n11748933\n;\n\n\npmid_list\n \n=\n \n[\n24008025\n,\n \n24170597\n];\n\n\n\n\n\n\n\n\nExport as an EndNote library file\n\n\nSaving one PMID's citaiton as an EndNote file\n\n\nenw_file\n \n=\n \nresults_dir\n \n*\n \n/11748933.enw\n;\n\n\nexport_citation\n(\npmid\n,\n \nendnote\n,\n \nenw_file\n);\n\n\n\n\n\n\nSaving citation for 1 articles\n\n\n\n\n\nSaving two PMIDs' citations as an EndNote file\n\n\nenw_file\n \n=\n \nresults_dir\n \n*\n \n/pmid_list.enw\n;\n\n\nexport_citation\n(\npmid_list\n,\n \nendnote\n,\n \nenw_file\n);\n\n\n\n\n\n\nSaving citation for 2 articles\n\n\n\n\n\n\n\nExplore one of the output files\n\n\nprintln\n(\nreadstring\n(\nenw_file\n))\n\n\n\n\n\n\n%0 Journal Article\n\n\n%A Vega-Robledo, GB\n\n\n%A Valencia-Zavala, MP\n\n\n%A S\u00e1nchez-Olivas, M\n\n\n%A Vel\u00e1zquez-S\u00e1mano, G\n\n\n%A Rico-Rosillo, G\n\n\n%D 2012\n\n\n%T [Association of obesity in adults with allergic asthma].\n\n\n%J Rev Alerg Mex\n\n\n%V 59\n\n\n%N 4\n\n\n%P 173-9\n\n\n%M 24008025\n\n\n%U http://www.ncbi.nlm.nih.gov/pubmed/24008025\n\n\n%X String[\nBACKGROUND: Obesity and asthma are diseases of high prevalence around the world. The increment in their incidence constitutes a challenge to public health. Asthma can be worse in patients with obesity. OBJECTIVE: To know the prevalence of obesity in a group of Mexican allergic asthmatic adults. METHODS: A study about the prevalence of obesity in 158 adult asthmatic allergic patients in the years 2010 and 2011 was performed, according to the body mass index (BMI) obtained from their clinical files. In addition, skin tests with allergens were done and the total serum level of IgE was determined in each one of the individuals. RESULTS: According to the BMI, 112 (70.9%) patients had a weight above normal; 76 (67.9%) were women and 36 (32.1%) were men. The highest number of patients with weight above normal corresponded to the overweight group. Mild persistent asthma presented in two-thirds of the patients with overweight and obesity. Women with overweight and obesity showed a higher severity of asthma than men. Women had more positive skin tests than men. Half of the patients had IgE levels above normal. CONCLUSIONS: We found an increased prevalence of asthmatic adults with associated obesity. Asthmatic women presented more overweight and obesity than men, as well as increased severity of asthma and more positive skin tests with allergens.\n]\n\n\n%K Adult\n\n\n%K Allergens\n\n\n%K Asthma\n\n\n%K Body Mass Index\n\n\n%K Humans\n\n\n%K Obesity\n\n\n%K Overweight\n\n\n%+ Departamento de Medicina Experimental, Torre de Investigaci\u00dbn,5\u221e piso, Facultad de Medicina, UNAM, M\u00c8xico D.F.\n\n\n\n%0 Journal Article\n\n\n%A Rogge, MM\n\n\n%A Merrill, E\n\n\n%D 2013\n\n\n%T Obesity education for nurse practitioners: perspectives from nurse practitioner faculty.\n\n\n%J J Am Assoc Nurse Pract\n\n\n%V 25\n\n\n%N 6\n\n\n%P 320-8\n\n\n%M 24170597\n\n\n%U http://www.ncbi.nlm.nih.gov/pubmed/24170597\n\n\n%X String[\nPURPOSE: The purpose of the study was to investigate curriculum content and teaching practices about obesity in graduate nursing programs in the United States. METHODOLOGY: A survey of 1202 faculty members teaching in nurse practitioner (NP) programs was conducted using an investigator-created instrument with items based on the National Institutes of Health Obesity Education Initiative guidelines. Objective items were analyzed using descriptive and nonparametric statistics, and the open-ended questions were analyzed using content analysis. FINDINGS: NP faculty emphasized existing clinical practice guidelines, but revealed a large disparity between what is emphasized in schools of nursing and the state of the science regarding obesity etiology and management. Faculty place a priority on teaching obesity as a key factor in the development of comorbidities, and weight loss as a means of treating these comorbidities. Teaching about the pathophysiology of obesity, management of bariatric surgery patients, and pharmacologic therapy are de-emphasized. Four main themes about obesity teaching practices were identified from subjects\n comments to open-ended items. CONCLUSIONS: Additional education and support are needed for faculty to teach about obesity in a way that advances the care of obese patients based on emerging scientific principles.\n]\n\n\n%K Attitude of Health Personnel\n\n\n%K Clinical Competence\n\n\n%K Curriculum\n\n\n%K Education, Nursing, Graduate\n\n\n%K Faculty, Nursing\n\n\n%K Humans\n\n\n%K Nurse Practitioners\n\n\n%K Obesity\n\n\n%K Obesity\n\n\n%K Obesity\n\n\n%K United States\n\n\n%+ Anita Thigpen Perry School of Nursing, Texas Tech University Health Sciences Center, Lubbock, Texas.\n\n\n\n\n\n\n\n\nExport as a Bibtex file\n\n\nSaving one PMID's citation as a BibTex file\n\n\nbib_file\n \n=\n \nresults_dir\n \n*\n \n/11748933.bib\n;\n\n\nexport_citation\n(\npmid\n,\n \nbibtex\n,\n \nbib_file\n);\n\n\n\n\n\n\nSaving citation for 1 articles\n\n\n\n\n\nSaving two PMIDs' citations as a BibTex file\n\n\nbib_file\n \n=\n \nresults_dir\n \n*\n \n/pmid_list.bib\n;\n\n\nexport_citation\n(\npmid_list\n,\n \nbibtex\n,\n \nbib_file\n);\n\n\n\n\n\n\nSaving citation for 2 articles\n\n\n\n\n\n\n\nExplore one of the output files\n\n\nprintln\n(\nreadstring\n(\nbib_file\n))\n\n\n\n\n\n\n@article {PMID:24008025,\n  author  = {Vega-Robledo, GB and Valencia-Zavala, MP and S\u00e1nchez-Olivas, M and Vel\u00e1zquez-S\u00e1mano, G and Rico-Rosillo, G},\n  title   = {[Association of obesity in adults with allergic asthma].},\n  journal = {Rev Alerg Mex},\n  year    = {2012},\n  volume  = {59},\n  number  = {4},\n  pages   = {173-9},\n  url     = {http://www.ncbi.nlm.nih.gov/pubmed/24008025},\n}\n\n\n@article {PMID:24170597,\n  author  = {Rogge, MM and Merrill, E},\n  title   = {Obesity education for nurse practitioners: perspectives from nurse practitioner faculty.},\n  journal = {J Am Assoc Nurse Pract},\n  year    = {2013},\n  volume  = {25},\n  number  = {6},\n  pages   = {320-8},\n  url     = {http://www.ncbi.nlm.nih.gov/pubmed/24170597},\n}\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "Export to Citations"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#export-pubmed-citations", 
            "text": "BioMedQuery has functions to search PubMed for PMIDs and save the xml data as either a BibTex or EndNote citation.  Here we export EndNote/BibTex citations from a PMID or a list of PMIDs. If you need to search Entrez/PubMed and save the results as citations, refer to Examples / PubMed Search and Save.", 
            "title": "Export PubMed Citations"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#set-up", 
            "text": "using   BioMedQuery . Processes   The functions require a directory to save the citation files to  results_dir   =   . ;  if   ! isdir ( results_dir ) \n      mkdir ( results_dir )  end   For this example, the below PMIDs are searched and saved as citations  pmid   =   11748933 ;  pmid_list   =   [ 24008025 ,   24170597 ];", 
            "title": "Set Up"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#export-as-an-endnote-library-file", 
            "text": "Saving one PMID's citaiton as an EndNote file  enw_file   =   results_dir   *   /11748933.enw ;  export_citation ( pmid ,   endnote ,   enw_file );   Saving citation for 1 articles  Saving two PMIDs' citations as an EndNote file  enw_file   =   results_dir   *   /pmid_list.enw ;  export_citation ( pmid_list ,   endnote ,   enw_file );   Saving citation for 2 articles", 
            "title": "Export as an EndNote library file"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#explore-one-of-the-output-files", 
            "text": "println ( readstring ( enw_file ))   %0 Journal Article  %A Vega-Robledo, GB  %A Valencia-Zavala, MP  %A S\u00e1nchez-Olivas, M  %A Vel\u00e1zquez-S\u00e1mano, G  %A Rico-Rosillo, G  %D 2012  %T [Association of obesity in adults with allergic asthma].  %J Rev Alerg Mex  %V 59  %N 4  %P 173-9  %M 24008025  %U http://www.ncbi.nlm.nih.gov/pubmed/24008025  %X String[ BACKGROUND: Obesity and asthma are diseases of high prevalence around the world. The increment in their incidence constitutes a challenge to public health. Asthma can be worse in patients with obesity. OBJECTIVE: To know the prevalence of obesity in a group of Mexican allergic asthmatic adults. METHODS: A study about the prevalence of obesity in 158 adult asthmatic allergic patients in the years 2010 and 2011 was performed, according to the body mass index (BMI) obtained from their clinical files. In addition, skin tests with allergens were done and the total serum level of IgE was determined in each one of the individuals. RESULTS: According to the BMI, 112 (70.9%) patients had a weight above normal; 76 (67.9%) were women and 36 (32.1%) were men. The highest number of patients with weight above normal corresponded to the overweight group. Mild persistent asthma presented in two-thirds of the patients with overweight and obesity. Women with overweight and obesity showed a higher severity of asthma than men. Women had more positive skin tests than men. Half of the patients had IgE levels above normal. CONCLUSIONS: We found an increased prevalence of asthmatic adults with associated obesity. Asthmatic women presented more overweight and obesity than men, as well as increased severity of asthma and more positive skin tests with allergens. ]  %K Adult  %K Allergens  %K Asthma  %K Body Mass Index  %K Humans  %K Obesity  %K Overweight  %+ Departamento de Medicina Experimental, Torre de Investigaci\u00dbn,5\u221e piso, Facultad de Medicina, UNAM, M\u00c8xico D.F.  %0 Journal Article  %A Rogge, MM  %A Merrill, E  %D 2013  %T Obesity education for nurse practitioners: perspectives from nurse practitioner faculty.  %J J Am Assoc Nurse Pract  %V 25  %N 6  %P 320-8  %M 24170597  %U http://www.ncbi.nlm.nih.gov/pubmed/24170597  %X String[ PURPOSE: The purpose of the study was to investigate curriculum content and teaching practices about obesity in graduate nursing programs in the United States. METHODOLOGY: A survey of 1202 faculty members teaching in nurse practitioner (NP) programs was conducted using an investigator-created instrument with items based on the National Institutes of Health Obesity Education Initiative guidelines. Objective items were analyzed using descriptive and nonparametric statistics, and the open-ended questions were analyzed using content analysis. FINDINGS: NP faculty emphasized existing clinical practice guidelines, but revealed a large disparity between what is emphasized in schools of nursing and the state of the science regarding obesity etiology and management. Faculty place a priority on teaching obesity as a key factor in the development of comorbidities, and weight loss as a means of treating these comorbidities. Teaching about the pathophysiology of obesity, management of bariatric surgery patients, and pharmacologic therapy are de-emphasized. Four main themes about obesity teaching practices were identified from subjects  comments to open-ended items. CONCLUSIONS: Additional education and support are needed for faculty to teach about obesity in a way that advances the care of obese patients based on emerging scientific principles. ]  %K Attitude of Health Personnel  %K Clinical Competence  %K Curriculum  %K Education, Nursing, Graduate  %K Faculty, Nursing  %K Humans  %K Nurse Practitioners  %K Obesity  %K Obesity  %K Obesity  %K United States  %+ Anita Thigpen Perry School of Nursing, Texas Tech University Health Sciences Center, Lubbock, Texas.", 
            "title": "Explore one of the output files"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#export-as-a-bibtex-file", 
            "text": "Saving one PMID's citation as a BibTex file  bib_file   =   results_dir   *   /11748933.bib ;  export_citation ( pmid ,   bibtex ,   bib_file );   Saving citation for 1 articles  Saving two PMIDs' citations as a BibTex file  bib_file   =   results_dir   *   /pmid_list.bib ;  export_citation ( pmid_list ,   bibtex ,   bib_file );   Saving citation for 2 articles", 
            "title": "Export as a Bibtex file"
        }, 
        {
            "location": "/examples/4_pubmed_export_citations/#explore-one-of-the-output-files_1", 
            "text": "println ( readstring ( bib_file ))   @article {PMID:24008025,\n  author  = {Vega-Robledo, GB and Valencia-Zavala, MP and S\u00e1nchez-Olivas, M and Vel\u00e1zquez-S\u00e1mano, G and Rico-Rosillo, G},\n  title   = {[Association of obesity in adults with allergic asthma].},\n  journal = {Rev Alerg Mex},\n  year    = {2012},\n  volume  = {59},\n  number  = {4},\n  pages   = {173-9},\n  url     = {http://www.ncbi.nlm.nih.gov/pubmed/24008025},\n}\n\n\n@article {PMID:24170597,\n  author  = {Rogge, MM and Merrill, E},\n  title   = {Obesity education for nurse practitioners: perspectives from nurse practitioner faculty.},\n  journal = {J Am Assoc Nurse Pract},\n  year    = {2013},\n  volume  = {25},\n  number  = {6},\n  pages   = {320-8},\n  url     = {http://www.ncbi.nlm.nih.gov/pubmed/24170597},\n}  This page was generated using  Literate.jl .", 
            "title": "Explore one of the output files"
        }, 
        {
            "location": "/examples/5_load_medline/", 
            "text": "Load MEDLINE\n\n\n\n\nThe MEDLINE loader process in BioMedQuery saves the MEDLINE baseline files to a MySQL database and saves the raw (xml.gz) and parsed (csv) files to a \nmedline\n directory that will be created in the provided \noutput_dir\n.\n\n\nWARNING:\n There are 900+ medline files each with approximately 30,000 articles. This process will take hours to run for the full baseline load.\n\n\nThe baseline files can be found \nhere\n.\n\n\n\n\nSet Up\n\n\nThe database and tables must already be created before loading the medline files. This process is set up for parallel processing.  To take advantage of this, workers can be added before loading the BioMedQuery package using the \naddprocs\n function.\n\n\nusing\n \nBioMedQuery\n.\nDBUtils\n\n\nusing\n \nBioMedQuery\n.\nPubMed\n\n\nusing\n \nBioMedQuery\n.\nProcesses\n\n\n\n\n\n\nBioMedQuery has utility functions to create the database and tables. \nNote: creating the tables using this function will drop any tables that already exist in the target database.\n\n\nconst\n \nconn\n \n=\n \nDBUtils\n.\ninit_mysql_database\n(\n127.0.0.1\n,\nroot\n,\n,\ntest_db\n,\n \ntrue\n);\n\n\nPubMed\n.\ncreate_tables!\n(\nconn\n);\n\n\n\n\n\n\nSet to overwrite MySQL database test_db\n\n\n\n\n\n\n\nLoad a Test File\n\n\nAs the full medline load is a large operation, it is recommended that a test run be completed first.\n\n\n@time\n \nProcesses\n.\nload_medline!\n(\nconn\n,\n \npwd\n(),\n \ntest\n=\ntrue\n)\n\n\n\n\n\n\nINFO: ======Setting up folders and creating FTP Connection======\nINFO: Getting files from Medline\nGetting file: pubmedsample18n0001.xml.gz\nINFO: Parsing files into CSV\nParsing file: pubmedsample18n0001.xml.gz\nINFO: Loading CSVs into MySQL\nLoading file: pubmedsample18n0001.xml.gz\nINFO: All files processed - closing FTP connection\n  0.389515 seconds (201.22 k allocations: 14.254 MiB)\n\n\n\n\n\nReview the output of this run in MySQL to make sure that it ran as expected. Additionally, the sample raw and parsed file should be in the new \nmedline\n directory in the current directory.\n\n\n\n\nPerforming a Full Load\n\n\nTo run a full load, use the same code as above, but do not pass the test variable. It is also possible to break up the load by passing which files to start and stop at - simply pass \nstart_file=n\n and \nend_file=p\n.\n\n\nAfter loading, it is recommended you add indexes to the tables, the \nadd_mysql_keys!\n function can be used to add a standard set of indexes.\n\n\nadd_mysql_keys!\n(\nconn\n)\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "Load MEDLINE"
        }, 
        {
            "location": "/examples/5_load_medline/#load-medline", 
            "text": "The MEDLINE loader process in BioMedQuery saves the MEDLINE baseline files to a MySQL database and saves the raw (xml.gz) and parsed (csv) files to a  medline  directory that will be created in the provided  output_dir .  WARNING:  There are 900+ medline files each with approximately 30,000 articles. This process will take hours to run for the full baseline load.  The baseline files can be found  here .", 
            "title": "Load MEDLINE"
        }, 
        {
            "location": "/examples/5_load_medline/#set-up", 
            "text": "The database and tables must already be created before loading the medline files. This process is set up for parallel processing.  To take advantage of this, workers can be added before loading the BioMedQuery package using the  addprocs  function.  using   BioMedQuery . DBUtils  using   BioMedQuery . PubMed  using   BioMedQuery . Processes   BioMedQuery has utility functions to create the database and tables.  Note: creating the tables using this function will drop any tables that already exist in the target database.  const   conn   =   DBUtils . init_mysql_database ( 127.0.0.1 , root , , test_db ,   true );  PubMed . create_tables! ( conn );   Set to overwrite MySQL database test_db", 
            "title": "Set Up"
        }, 
        {
            "location": "/examples/5_load_medline/#load-a-test-file", 
            "text": "As the full medline load is a large operation, it is recommended that a test run be completed first.  @time   Processes . load_medline! ( conn ,   pwd (),   test = true )   INFO: ======Setting up folders and creating FTP Connection======\nINFO: Getting files from Medline\nGetting file: pubmedsample18n0001.xml.gz\nINFO: Parsing files into CSV\nParsing file: pubmedsample18n0001.xml.gz\nINFO: Loading CSVs into MySQL\nLoading file: pubmedsample18n0001.xml.gz\nINFO: All files processed - closing FTP connection\n  0.389515 seconds (201.22 k allocations: 14.254 MiB)  Review the output of this run in MySQL to make sure that it ran as expected. Additionally, the sample raw and parsed file should be in the new  medline  directory in the current directory.", 
            "title": "Load a Test File"
        }, 
        {
            "location": "/examples/5_load_medline/#performing-a-full-load", 
            "text": "To run a full load, use the same code as above, but do not pass the test variable. It is also possible to break up the load by passing which files to start and stop at - simply pass  start_file=n  and  end_file=p .  After loading, it is recommended you add indexes to the tables, the  add_mysql_keys!  function can be used to add a standard set of indexes.  add_mysql_keys! ( conn )   This page was generated using  Literate.jl .", 
            "title": "Performing a Full Load"
        }, 
        {
            "location": "/processes/", 
            "text": "This module provides common processes/workflows when using the BioMedQuery utilities. For instance, searching PubMed, requires calling the NCBI e-utils in a particular order. After the search, the results are often saved to the database. This module contains pre-assembled functions performing all necessary steps. To see sample scripts that use this processes, refer to the following \nsection\n\n\nImport\n\n\nusing BioMedQuery.Processes\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioMedQuery.Processes.close_cons\n\n\nBioMedQuery.Processes.export_citation\n\n\nBioMedQuery.Processes.export_citation\n\n\nBioMedQuery.Processes.get_file_name\n\n\nBioMedQuery.Processes.get_ftp_con\n\n\nBioMedQuery.Processes.get_ml_file\n\n\nBioMedQuery.Processes.init_medline\n\n\nBioMedQuery.Processes.load_medline!\n\n\nBioMedQuery.Processes.map_mesh_to_umls!\n\n\nBioMedQuery.Processes.map_mesh_to_umls_async!\n\n\nBioMedQuery.Processes.parse_ml_file\n\n\nBioMedQuery.Processes.pubmed_search_and_parse\n\n\nBioMedQuery.Processes.pubmed_search_and_save!\n\n\nBioMedQuery.Processes.umls_semantic_occurrences\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nBioMedQuery.Processes.export_citation\n \n \nFunction\n.\n\n\nexport_citation(pmid::Int64, citation_type, output_file,verbose)\n\n\n\n\n\nExport, to an output file, the citation for PubMed article identified by the given pmid\n\n\nArguments\n\n\n\n\ncitation_type::String\n: At the moment supported types include: \"endnote\", \"bibtex\"\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.export_citation\n \n \nFunction\n.\n\n\nexport_citation(pmids::Vector{Int64}, citation_type, output_file,verbose)\n\n\n\n\n\nExport, to an output file, the citation for collection of PubMed articles identified by the given pmids\n\n\nArguments\n\n\n\n\ncitation_type::String\n: At the moment supported types include: \"endnote\", \"bibtex\"\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.load_medline!\n \n \nMethod\n.\n\n\nload_medline(db_con, output_dir; start_file=1, end_file=928, year=2018, test=false)\n\n\n\n\n\nGiven a MySQL connection and optionally the start and end files, fetches the medline files, parses the xml, and loads into a MySQL DB (assumes tables already exist). The raw (xml.gz) and parsed (csv) files will be stored in the output_dir.\n\n\nArguments\n\n\n\n\ndb_con\n : A MySQL Connection to a db (tables must already be created - see \nPubMed.create_tables!\n)\n\n\noutput_dir\n : root directory where the raw and parsed files should be stored\n\n\nstart_file\n : which medline file should the loading start at\n\n\nend_file\n : which medline file should the loading end at (default is last file in 2018 baseline)\n\n\nyear\n : which year medline is (current is 2018)\n\n\ntest\n : if true, a sample file will be downloaded, parsed, and loaded instead of the baseline files\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.map_mesh_to_umls!\n \n \nMethod\n.\n\n\nmap_mesh_to_umls!(db, c::Credentials)\n\n\n\n\n\nBuild and store in the given database a map from MESH descriptors to UMLS Semantic Concepts\n\n\nArguments\n\n\n\n\ndb\n : Database connection. Must contain TABLE:mesh_descriptor. For each of the descriptors in that table, search and insert the associated semantic concepts into a new (cleared) TABLE:mesh2umls\n\n\nuser\n : UMLS username\n\n\npsswd\n : UMLS Password\n\n\nappend_results::Bool\n : If false a NEW and EMPTY mesh2umls database table in creted\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.map_mesh_to_umls_async!\n \n \nMethod\n.\n\n\nmap_mesh_to_umls_async\n!(\ndb\n,\n \nc\n::\nCredentials\n;\n \ntimeout\n,\n \nappend_results\n,\n \nverbose\n)\n\n\n\n\n\n\nBuild (using async UMLS-API calls) and store in the given database a map from MESH descriptors to UMLS Semantic Concepts. For large queies this function will be faster than it's synchrounous counterpart\n\n\nArguments\n\n\n\n\ndb\n: Database. Must contain TABLE:mesh_descriptor. For each of the descriptors  in that table, search and insert the associated semantic concepts into a new (cleared) TABLE:mesh2umls\n\n\nuser\n : UMLS username\n\n\npsswd\n : UMLS Password\n\n\nappend_results::Bool\n : If false a NEW and EMPTY mesh2umls database table in creted\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.pubmed_search_and_parse\n \n \nFunction\n.\n\n\npubmed_search_and_parse(email, search_term::String, article_max, verbose=false)\n\n\n\n\n\nSearch pubmed and parse the results into a dictionary of DataFrames.  The dataframes have the same names and fields as the pubmed database schema. (e.g. df_dict[\"basic\"] returns a dataframe with the basic article info)\n\n\nArguments\n\n\n\n\nemail\n : valid email address (otherwise pubmed may block you)\n\n\nsearch_term\n : search string to submit to PubMed e.g \n(asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication])\n see http://www.ncbi.nlm.nih.gov/pubmed/advanced for help constructing the string\n\n\narticle_max\n : maximum number of articles to return\n\n\nverbose\n : if true, the NCBI xml response files are saved to current directory\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.pubmed_search_and_save!\n \n \nFunction\n.\n\n\npubmed_search_and_save!(email, search_term::String, article_max,\nconn, verbose=false)\n\n\n\n\n\nSearch pubmed and save the results into a database connection. The database is expected to exist and have the appriate pubmed related tables. You can create such tables using \nPubMed.create_tables(conn)\n\n\nArguments\n\n\n\n\nemail\n : valid email address (otherwise pubmed may block you)\n\n\nsearch_term\n : search string to submit to PubMed e.g \n(asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication])\n see http://www.ncbi.nlm.nih.gov/pubmed/advanced for help constructing the string\n\n\narticle_max\n : maximum number of articles to return\n\n\nconn\n : database connection\n\n\nverbose\n : if true, the NCBI xml response files are saved to current directory\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.umls_semantic_occurrences\n \n \nMethod\n.\n\n\numls_semantic_occurrences(db, umls_semantic_type)\n\n\n\n\n\nReturn a sparse matrix indicating the presence of MESH descriptors associated with a given umls semantic type in all articles of the input database\n\n\nOutput\n\n\n\n\ndes_ind_dict\n: Dictionary matching row number to descriptor names\n\n\ndisease_occurances\n : Sparse matrix. The columns correspond to a feature vector, where each row is a MESH descriptor. There are as many columns as articles. The occurance/abscense of a descriptor is labeled as 1/0\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.close_cons\n \n \nMethod\n.\n\n\nclose_cons(ftp_con)\n\n\n\n\n\ncloses connection and cleans up\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.get_file_name\n \n \nFunction\n.\n\n\nget_file_name(fnum::Int, year::Int = 2018, test = false)\n\n\n\n\n\nReturns the medline file name given the file number and year.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.get_ftp_con\n \n \nFunction\n.\n\n\nget_ftp_con(test = false)\n\n\n\n\n\nGet an FTP connection\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.get_ml_file\n \n \nMethod\n.\n\n\nget_ml_file(fname::String, conn::ConnContext, output_dir)\n\n\n\n\n\nRetrieves the file with fname and puts in medline/raw_files.  Returns the HTTP response.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.init_medline\n \n \nFunction\n.\n\n\ninit_medline(output_dir, test=false)\n\n\n\n\n\nSets up environment (folders), and connects to medline FTP Server and returns the connection.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.Processes.parse_ml_file\n \n \nMethod\n.\n\n\nparse_ml_file(fname::String, output_dir::String)\n\n\n\n\n\nParses the medline xml file into a dictionary of dataframes. Saves the resulting CSV files to medline/parsed_files.\n\n\nsource", 
            "title": "Processes/Workflows"
        }, 
        {
            "location": "/processes/#import", 
            "text": "using BioMedQuery.Processes", 
            "title": "Import"
        }, 
        {
            "location": "/processes/#index", 
            "text": "BioMedQuery.Processes.close_cons  BioMedQuery.Processes.export_citation  BioMedQuery.Processes.export_citation  BioMedQuery.Processes.get_file_name  BioMedQuery.Processes.get_ftp_con  BioMedQuery.Processes.get_ml_file  BioMedQuery.Processes.init_medline  BioMedQuery.Processes.load_medline!  BioMedQuery.Processes.map_mesh_to_umls!  BioMedQuery.Processes.map_mesh_to_umls_async!  BioMedQuery.Processes.parse_ml_file  BioMedQuery.Processes.pubmed_search_and_parse  BioMedQuery.Processes.pubmed_search_and_save!  BioMedQuery.Processes.umls_semantic_occurrences", 
            "title": "Index"
        }, 
        {
            "location": "/processes/#functions", 
            "text": "#  BioMedQuery.Processes.export_citation     Function .  export_citation(pmid::Int64, citation_type, output_file,verbose)  Export, to an output file, the citation for PubMed article identified by the given pmid  Arguments   citation_type::String : At the moment supported types include: \"endnote\", \"bibtex\"   source  #  BioMedQuery.Processes.export_citation     Function .  export_citation(pmids::Vector{Int64}, citation_type, output_file,verbose)  Export, to an output file, the citation for collection of PubMed articles identified by the given pmids  Arguments   citation_type::String : At the moment supported types include: \"endnote\", \"bibtex\"   source  #  BioMedQuery.Processes.load_medline!     Method .  load_medline(db_con, output_dir; start_file=1, end_file=928, year=2018, test=false)  Given a MySQL connection and optionally the start and end files, fetches the medline files, parses the xml, and loads into a MySQL DB (assumes tables already exist). The raw (xml.gz) and parsed (csv) files will be stored in the output_dir.  Arguments   db_con  : A MySQL Connection to a db (tables must already be created - see  PubMed.create_tables! )  output_dir  : root directory where the raw and parsed files should be stored  start_file  : which medline file should the loading start at  end_file  : which medline file should the loading end at (default is last file in 2018 baseline)  year  : which year medline is (current is 2018)  test  : if true, a sample file will be downloaded, parsed, and loaded instead of the baseline files   source  #  BioMedQuery.Processes.map_mesh_to_umls!     Method .  map_mesh_to_umls!(db, c::Credentials)  Build and store in the given database a map from MESH descriptors to UMLS Semantic Concepts  Arguments   db  : Database connection. Must contain TABLE:mesh_descriptor. For each of the descriptors in that table, search and insert the associated semantic concepts into a new (cleared) TABLE:mesh2umls  user  : UMLS username  psswd  : UMLS Password  append_results::Bool  : If false a NEW and EMPTY mesh2umls database table in creted   source  #  BioMedQuery.Processes.map_mesh_to_umls_async!     Method .  map_mesh_to_umls_async !( db ,   c :: Credentials ;   timeout ,   append_results ,   verbose )   Build (using async UMLS-API calls) and store in the given database a map from MESH descriptors to UMLS Semantic Concepts. For large queies this function will be faster than it's synchrounous counterpart  Arguments   db : Database. Must contain TABLE:mesh_descriptor. For each of the descriptors  in that table, search and insert the associated semantic concepts into a new (cleared) TABLE:mesh2umls  user  : UMLS username  psswd  : UMLS Password  append_results::Bool  : If false a NEW and EMPTY mesh2umls database table in creted   source  #  BioMedQuery.Processes.pubmed_search_and_parse     Function .  pubmed_search_and_parse(email, search_term::String, article_max, verbose=false)  Search pubmed and parse the results into a dictionary of DataFrames.  The dataframes have the same names and fields as the pubmed database schema. (e.g. df_dict[\"basic\"] returns a dataframe with the basic article info)  Arguments   email  : valid email address (otherwise pubmed may block you)  search_term  : search string to submit to PubMed e.g  (asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication])  see http://www.ncbi.nlm.nih.gov/pubmed/advanced for help constructing the string  article_max  : maximum number of articles to return  verbose  : if true, the NCBI xml response files are saved to current directory   source  #  BioMedQuery.Processes.pubmed_search_and_save!     Function .  pubmed_search_and_save!(email, search_term::String, article_max,\nconn, verbose=false)  Search pubmed and save the results into a database connection. The database is expected to exist and have the appriate pubmed related tables. You can create such tables using  PubMed.create_tables(conn)  Arguments   email  : valid email address (otherwise pubmed may block you)  search_term  : search string to submit to PubMed e.g  (asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication])  see http://www.ncbi.nlm.nih.gov/pubmed/advanced for help constructing the string  article_max  : maximum number of articles to return  conn  : database connection  verbose  : if true, the NCBI xml response files are saved to current directory   source  #  BioMedQuery.Processes.umls_semantic_occurrences     Method .  umls_semantic_occurrences(db, umls_semantic_type)  Return a sparse matrix indicating the presence of MESH descriptors associated with a given umls semantic type in all articles of the input database  Output   des_ind_dict : Dictionary matching row number to descriptor names  disease_occurances  : Sparse matrix. The columns correspond to a feature vector, where each row is a MESH descriptor. There are as many columns as articles. The occurance/abscense of a descriptor is labeled as 1/0   source  #  BioMedQuery.Processes.close_cons     Method .  close_cons(ftp_con)  closes connection and cleans up  source  #  BioMedQuery.Processes.get_file_name     Function .  get_file_name(fnum::Int, year::Int = 2018, test = false)  Returns the medline file name given the file number and year.  source  #  BioMedQuery.Processes.get_ftp_con     Function .  get_ftp_con(test = false)  Get an FTP connection  source  #  BioMedQuery.Processes.get_ml_file     Method .  get_ml_file(fname::String, conn::ConnContext, output_dir)  Retrieves the file with fname and puts in medline/raw_files.  Returns the HTTP response.  source  #  BioMedQuery.Processes.init_medline     Function .  init_medline(output_dir, test=false)  Sets up environment (folders), and connects to medline FTP Server and returns the connection.  source  #  BioMedQuery.Processes.parse_ml_file     Method .  parse_ml_file(fname::String, output_dir::String)  Parses the medline xml file into a dictionary of dataframes. Saves the resulting CSV files to medline/parsed_files.  source", 
            "title": "Functions"
        }, 
        {
            "location": "/pubmed/", 
            "text": "Utility functions to parse and store PubMed searches via \nBioServices.EUtils\n\n\n\n\nImport Module\n\n\nusing BioMedQuery.PubMed\n\n\n\n\n\nThis module provides utility functions to parse, store and export queries to PubMed via the NCBI EUtils and its julia interface \nBioServices.EUtils\n. For many purposes you may interact with the higher level pipelines in [BioMedQuery.Processes]. Here, some of the lower level functions are discussed in case you need to assemble different pipelines.\n\n\n\n\nBasics of searching PubMed\n\n\nWe are often interested in searching PubMed for all articles related to a search term, and possibly restricted by other search criteria. To do so we use \nBioServices.EUtils\n. A basic example of how we may use the functions \nesearch\n and \nefetch\n to accomplish such task is illustrated below.\n\n\nusing\n \nBioServices\n.\nEUtils\n\n\nusing\n \nXMLDict\n\n\nusing\n \nLightXML\n\n\n\nsearch_term\n \n=\n \nobstructive sleep apnea[MeSH Major Topic]\n\n\n\n#esearch\n\n\nesearch_response\n \n=\n \nesearch\n(\ndb\n=\npubmed\n,\n \nterm\n \n=\n \nsearch_term\n,\n\n\nretstart\n \n=\n \n0\n,\n \nretmax\n \n=\n \n20\n,\n \ntool\n \n=\nBioJulia\n)\n\n\n\n#convert xml to dictionary\n\n\nesearch_dict\n \n=\n \nparse_xml\n(\nString\n(\nesearch_response\n.\nbody\n))\n\n\n\n#convert id\ns to a array of numbers\n\n\nids\n \n=\n \n[\nparse\n(\nInt64\n,\n \nid_node\n)\n \nfor\n \nid_node\n \nin\n \nesearch_dict\n[\nIdList\n][\nId\n]]\n\n\n\n#efetch\n\n\nefetch_response\n \n=\n \nefetch\n(\ndb\n \n=\n \npubmed\n,\n \ntool\n \n=\n \nBioJulia\n,\n \nretmode\n \n=\n \nxml\n,\n \nrettype\n \n=\n \nnull\n,\n \nid\n \n=\n \nids\n)\n\n\n\n#convert xml to xml node tree\n\n\nefetch_doc\n \n=\n \nroot\n(\nparse_string\n(\nString\n(\nefetch_response\n.\nbody\n)))\n\n\n\n\n\n\n\n\nHandling XML responses\n\n\nMany APIs return responses in XML form.\n\n\nTo parse an XML to a Julia dictionary we can use the XMLDict package\n\n\nusing\n \nXMLDict\n\n\ndict\n \n=\n \nparse_xml\n(\nString\n(\nresponse\n.\nbody\n))\n  \n\n\n\n\n\nYou can save directly the XML String to file\n\n\nxdoc\n \n=\n \nparse_string\n(\nesearch\n)\n\n\nsave_file\n(\nxdoc\n,\n \n./file.xml\n)\n\n\n\n\n\n\n\n\n\n\nSave eseach/efetch responses\n\n\n\n\nSave PMIDs to MySQL\n\n\nIf we are only interseted in saving a list of PMIDs associated with a query, we can do so as follows\n\n\ndbname\n \n=\n \nentrez_test\n\n\nhost\n \n=\n \n127.0.0.1\n;\n\n\nuser\n \n=\n \nroot\n\n\npwd\n \n=\n \n\n\n\n#Collect PMIDs from esearch result\n\n\nids\n \n=\n \nArray\n{\nInt64\n,\n1\n}()\n\n\nfor\n \nid_node\n \nin\n \nesearch_dict\n[\nIdList\n][\nId\n]\n\n    \npush!\n(\nids\n,\n \nparse\n(\nInt64\n,\n \nid_node\n))\n\n\nend\n\n\n\n# Initialize or connect to database\n\n\nconst\n \nconn\n \n=\n \nDBUtils\n.\ninit_mysql_database\n(\nhost\n,\n \nuser\n,\n \npwd\n,\n \ndbname\n)\n\n\n\n# Create `article` table to store pmids\n\n\nPubMed\n.\ncreate_pmid_table!\n(\nconn\n)\n\n\n\n#Save pmids\n\n\nPubMed\n.\nsave_pmids!\n(\nconn\n,\n \nids\n)\n\n\n\n#query the article table to explore list of pmids\n\n\nall_pmids\n \n=\n \nBioMedQuery\n.\nPubMed\n.\nall_pmids\n(\nconn\n)\n\n\n\n\n\n\n\n\nExport efetch response as EndNote citation file\n\n\nWe can export the information returned by efetch as and EndNote/BibTex library file\n\n\ncitation\n \n=\n \nPubMed\n.\nCitationOutput\n(\nendnote\n,\n \n./citations_temp.endnote\n,\n \ntrue\n)\n\n\nnsucceses\n \n=\n \nPubMed\n.\nsave_efetch!\n(\ncitation\n,\n \nefetch_doc\n,\n \nverbose\n)\n\n\n\n\n\n\n\n\nSave efetch response to MySQL database\n\n\nSave the information returned by efetch to a MySQL database\n\n\ndbname\n \n=\n \nefetch_test\n\n\nhost\n \n=\n \n127.0.0.1\n;\n\n\nuser\n \n=\n \nroot\n\n\npwd\n \n=\n \n\n\n\n# Save results of efetch to database and cleanup intermediate CSV files\n\n\nconst\n \nconn\n \n=\n \nDBUtils\n.\ninit_mysql_database\n(\nhost\n,\n \nuser\n,\n \npwd\n,\n \ndbname\n)\n\n\nPubMed\n.\ncreate_tables!\n(\nconn\n)\n\n\nPubMed\n.\nsave_efetch!\n(\nconn\n,\n \nefetch_doc\n,\n \nfalse\n,\n \ntrue\n)\n \n# verbose = false, drop_csv = true\n\n\n\n\n\n\n\n\nSave efetch response to SQLite database\n\n\nSave the information returned by efetch to a MySQL database\n\n\ndb_path\n \n=\n \n./test_db.db\n\n\n\nconst\n \nconn\n \n=\n \nSQLite\n.\nDB\n(\ndb_path\n)\n\n\nPubMed\n.\ncreate_tables!\n(\nconn\n)\n\n\nPubMed\n.\nsave_efetch!\n(\nconn\n,\n \nefetch_doc\n)\n\n\n\n\n\n\n\n\nReturn efetch response as a dictionary of DataFrames\n\n\nThe information returned by efetch can also be returned as dataframes. The dataframes match the format of the tables that are created for the sql saving functions (schema image below). These dataframes can also easily be saved to csv files.\n\n\n    \ndfs\n \n=\n \nPubMed\n.\nparse\n(\nefetch_doc\n)\n\n\n    \nPubMed\n.\ndfs_to_csv\n(\ndfs\n,\n \nmy/path\n,\n \nmy_file_prefix_\n)\n\n\n\n\n\n\n\n\nExploring output databases\n\n\nThe following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue        \n\n\n\n\nWe can also explore the tables using BioMedQuery.DBUtils, e,g\n\n\ntables\n \n=\n \n[\nauthor_ref\n,\n \nmesh_desc\n,\n\n\nmesh_qual\n,\n \nmesh_heading\n]\n\n\n\nfor\n \nt\n \nin\n \ntables\n\n    \nquery_str\n \n=\n \nSELECT * FROM \n*\nt\n*\n LIMIT 10;\n\n    \nq\n \n=\n \nDBUtils\n.\ndb_query\n(\ndb\n,\n \nquery_str\n)\n\n    \nprintln\n(\nq\n)\n\n\nend\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioMedQuery.PubMed.abstracts\n\n\nBioMedQuery.PubMed.abstracts_by_year\n\n\nBioMedQuery.PubMed.add_mysql_keys!\n\n\nBioMedQuery.PubMed.all_mesh\n\n\nBioMedQuery.PubMed.all_pmids\n\n\nBioMedQuery.PubMed.citations_bibtex\n\n\nBioMedQuery.PubMed.citations_endnote\n\n\nBioMedQuery.PubMed.create_pmid_table!\n\n\nBioMedQuery.PubMed.create_tables!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.dfs_to_csv\n\n\nBioMedQuery.PubMed.dict_to_array\n\n\nBioMedQuery.PubMed.drop_mysql_keys!\n\n\nBioMedQuery.PubMed.get_article_mesh\n\n\nBioMedQuery.PubMed.get_article_mesh_by_concept\n\n\nBioMedQuery.PubMed.parse_MedlineDate\n\n\nBioMedQuery.PubMed.parse_author\n\n\nBioMedQuery.PubMed.parse_month\n\n\nBioMedQuery.PubMed.parse_orcid\n\n\nBioMedQuery.PubMed.parse_year\n\n\nBioMedQuery.PubMed.remove_csvs\n\n\nBioMedQuery.PubMed.remove_csvs\n\n\nBioMedQuery.PubMed.save_efetch!\n\n\nBioMedQuery.PubMed.save_efetch!\n\n\nBioMedQuery.PubMed.save_pmids!\n\n\nBioMedQuery.PubMed.strip_newline\n\n\n\n\n\n\nStructs and Functions\n\n\n#\n\n\nBase.parse\n \n \nMethod\n.\n\n\nparse(xml)\n\n\n\n\n\nParses a PubMedArticleSet that matches the NCBI-XML format\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.abstracts\n \n \nMethod\n.\n\n\nabstracts(db; local_medline=false)\n\n\n\n\n\nReturn all abstracts related to PMIDs in the database. If local_medline flag is set to true, it is assumed that db contains \nbasic\n table with only PMIDs and all other info is available in a (same host) medline database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.abstracts_by_year\n \n \nMethod\n.\n\n\nabstracts_by_year(db, pub_year; local_medline=false)\n\n\n\n\n\nReturn all abstracts of article published in the given year. If local_medline flag is set to true, it is assumed that db contains \narticle\n table with only PMIDs and all other info is available in a (same host) medline database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.add_mysql_keys!\n \n \nMethod\n.\n\n\nadd_mysql_keys!(conn)\n\n\n\n\n\nAdds indices/keys to MySQL PubMed tables.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.all_pmids\n \n \nMethod\n.\n\n\nall_pmids(db)\n\n\n\n\n\nReturn all PMIDs stored in the \nbasic\n table of the input database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.citations_bibtex\n \n \nFunction\n.\n\n\ncitations_bibtex(article::Dict{String,DataFrame}, verbose=false)\n\n\n\n\n\nTransforms a Dictionary of pubmed dataframes into text corresponding to its bibtex citation\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.citations_endnote\n \n \nFunction\n.\n\n\ncitations_endnote(article::Dict{String,DataFrame}, verbose=false)\n\n\n\n\n\nTransforms a Dictionary of pubmed dataframes into text corresponding to its endnote citation\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.create_pmid_table!\n \n \nMethod\n.\n\n\ncreate_pmid_table!(conn; tablename=\narticle\n)\n\n\n\n\n\nCreates a table, using either MySQL of SQLite, to store PMIDs from Entrez related searches. All tables are empty at this point\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.create_tables!\n \n \nMethod\n.\n\n\ncreate_tables!(conn)\n\n\n\n\n\nCreate and initialize tables to save results from an Entrez/PubMed search or a medline file load. Caution, all related tables are dropped if they exist\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.db_insert!\n \n \nFunction\n.\n\n\ndb_insert\n!(\nconn\n,\n \narticles\n::\nDict\n{\nString,DataFrame\n}\n,\n \ncsv_path\n=\npwd\n(),\n \ncsv_prefix\n=\ncurrent date\n_PubMed_\n;\n \nverbose\n=\nfalse\n,\n \ndrop_csvs\n=\nfalse\n)\n\n\n\n\n\n\nWrites dictionary of dataframes to a SQLite database.  Tables must already exist (see PubMed.create_tables!).  CSVs that are created during writing can be saved (default) or removed.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.db_insert!\n \n \nFunction\n.\n\n\ndb_insert!(conn, csv_path=pwd(), csv_prefix=\ncurrent date\n_PubMed_\n; verbose=false, drop_csvs=false)\n\n\n\n\n\nWrites CSVs from PubMed parsing to a MySQL database.  Tables must already exist (see PubMed.create_tables!).  CSVs can optionally be removed after being written to DB.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.db_insert!\n \n \nFunction\n.\n\n\ndb_insert\n!(\nconn\n,\n \narticles\n::\nDict\n{\nString,DataFrame\n}\n,\n \ncsv_path\n=\npwd\n(),\n \ncsv_prefix\n=\ncurrent date\n_PubMed_\n;\n \nverbose\n=\nfalse\n,\n \ndrop_csvs\n=\nfalse\n)\n\n\n\n\n\n\nWrites dictionary of dataframes to a MySQL database.  Tables must already exist (see PubMed.create_tables!).  CSVs that are created during writing can be saved (default) or removed.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.dfs_to_csv\n \n \nFunction\n.\n\n\ndfs_to_csv(dfs::Dict, path::String, [file_prefix::String])\n\n\n\n\n\nTakes output of toDataFrames and writes to CSV files at the provided path and with the file prefix.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.drop_mysql_keys!\n \n \nMethod\n.\n\n\ndrop_mysql_keys!(conn)\n\n\n\n\n\nRemoves keys/indices from MySQL PubMed tables.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.get_article_mesh\n \n \nMethod\n.\n\n\nget_article_mesh(db, pmid)\n\n\n\n\n\nGet the all mesh-descriptors associated with a given article\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.get_article_mesh_by_concept\n \n \nMethod\n.\n\n\nget_article_mesh_by_concept(db, pmid, umls_concepts...; local_medline)\n\n\n\n\n\nGet the all mesh-descriptors associated with a given article\n\n\nArguments:\n\n\n\n\nquery_string: \"\" - assumes full set of results were saved by BioMedQuery directly from XML\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.save_efetch!\n \n \nFunction\n.\n\n\nsave_efetch!(output::CitationOutput, efetch_dict, verbose=false)\n\n\n\n\n\nSave the results of a Entrez efetch to a bibliography file, with format and file path given by \noutput::CitationOutput\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.save_efetch!\n \n \nFunction\n.\n\n\n pubmed_save_efetch(efetch_dict, conn)\n\n\n\n\n\nSave the results (dictionary) of an entrez-pubmed fetch to the input database.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.save_pmids!\n \n \nFunction\n.\n\n\n save_pmids!(conn, pmids::Vector{Int64}, verbose::Bool=false)\n\n\n\n\n\nSave a list of PMIDS into input database.\n\n\nArguments:\n\n\n\n\nconn\n: Database connection (MySQL or SQLite)\n\n\npmids\n: Array of PMIDs\n\n\nverbose\n: Boolean to turn on extra print statements\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.all_mesh\n \n \nMethod\n.\n\n\nall_mesh(db)\n\n\n\n\n\nReturn all MeSH stored in the \nmesh_desc\n table of the input database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.dict_to_array\n \n \nMethod\n.\n\n\ndict_to_array(dict::Dict)\n\n\n\n\n\nGiven a dictionary, returns a tuple of arrays with the keys and values.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.parse_MedlineDate\n \n \nMethod\n.\n\n\nparse_MedlineDate(ml_dt::String)\n\n\n\n\n\nParses the contents of the MedlineDate element and returns a tuple of the year and month.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.parse_author\n \n \nMethod\n.\n\n\nparse_author\n\n\n\n\n\nTakes xml for author, and returns parsed elements\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.parse_month\n \n \nMethod\n.\n\n\nparse_month(mon::String)\n\n\n\n\n\nParses the string month (month or season) and returns an integer with the first month in range.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.parse_orcid\n \n \nMethod\n.\n\n\nparse_orcid(raw_orc::String)\n\n\n\n\n\nTakes a string containing an ORC ID (url, 16 digit string) and returns a formatted ID (0000-1111-2222-3333).\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.parse_year\n \n \nMethod\n.\n\n\nparse_year(yr::String)\n\n\n\n\n\nParses the string year and returns an integer with the first year in range.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.remove_csvs\n \n \nFunction\n.\n\n\nremove_csvs(dfs, path, file_prefix)\n\n\n\n\n\nRemoves all of the CSV files associated with a dictionary of dataframes\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.remove_csvs\n \n \nMethod\n.\n\n\nremove_csvs(paths::Vector)\n\n\n\n\n\nRemoves all of the CSV files associated with an array of paths\n\n\nsource\n\n\n#\n\n\nBioMedQuery.PubMed.strip_newline\n \n \nMethod\n.\n\n\nstrip_newline(val::Union{Missing,String})\n\n\n\n\n\nReplaces new line characters with spaces.\n\n\nsource", 
            "title": "PubMed"
        }, 
        {
            "location": "/pubmed/#import-module", 
            "text": "using BioMedQuery.PubMed  This module provides utility functions to parse, store and export queries to PubMed via the NCBI EUtils and its julia interface  BioServices.EUtils . For many purposes you may interact with the higher level pipelines in [BioMedQuery.Processes]. Here, some of the lower level functions are discussed in case you need to assemble different pipelines.", 
            "title": "Import Module"
        }, 
        {
            "location": "/pubmed/#basics-of-searching-pubmed", 
            "text": "We are often interested in searching PubMed for all articles related to a search term, and possibly restricted by other search criteria. To do so we use  BioServices.EUtils . A basic example of how we may use the functions  esearch  and  efetch  to accomplish such task is illustrated below.  using   BioServices . EUtils  using   XMLDict  using   LightXML  search_term   =   obstructive sleep apnea[MeSH Major Topic]  #esearch  esearch_response   =   esearch ( db = pubmed ,   term   =   search_term ,  retstart   =   0 ,   retmax   =   20 ,   tool   = BioJulia )  #convert xml to dictionary  esearch_dict   =   parse_xml ( String ( esearch_response . body ))  #convert id s to a array of numbers  ids   =   [ parse ( Int64 ,   id_node )   for   id_node   in   esearch_dict [ IdList ][ Id ]]  #efetch  efetch_response   =   efetch ( db   =   pubmed ,   tool   =   BioJulia ,   retmode   =   xml ,   rettype   =   null ,   id   =   ids )  #convert xml to xml node tree  efetch_doc   =   root ( parse_string ( String ( efetch_response . body )))", 
            "title": "Basics of searching PubMed"
        }, 
        {
            "location": "/pubmed/#handling-xml-responses", 
            "text": "Many APIs return responses in XML form.  To parse an XML to a Julia dictionary we can use the XMLDict package  using   XMLDict  dict   =   parse_xml ( String ( response . body ))     You can save directly the XML String to file  xdoc   =   parse_string ( esearch )  save_file ( xdoc ,   ./file.xml )", 
            "title": "Handling XML responses"
        }, 
        {
            "location": "/pubmed/#save-eseachefetch-responses", 
            "text": "", 
            "title": "Save eseach/efetch responses"
        }, 
        {
            "location": "/pubmed/#save-pmids-to-mysql", 
            "text": "If we are only interseted in saving a list of PMIDs associated with a query, we can do so as follows  dbname   =   entrez_test  host   =   127.0.0.1 ;  user   =   root  pwd   =    #Collect PMIDs from esearch result  ids   =   Array { Int64 , 1 }()  for   id_node   in   esearch_dict [ IdList ][ Id ] \n     push! ( ids ,   parse ( Int64 ,   id_node ))  end  # Initialize or connect to database  const   conn   =   DBUtils . init_mysql_database ( host ,   user ,   pwd ,   dbname )  # Create `article` table to store pmids  PubMed . create_pmid_table! ( conn )  #Save pmids  PubMed . save_pmids! ( conn ,   ids )  #query the article table to explore list of pmids  all_pmids   =   BioMedQuery . PubMed . all_pmids ( conn )", 
            "title": "Save PMIDs to MySQL"
        }, 
        {
            "location": "/pubmed/#export-efetch-response-as-endnote-citation-file", 
            "text": "We can export the information returned by efetch as and EndNote/BibTex library file  citation   =   PubMed . CitationOutput ( endnote ,   ./citations_temp.endnote ,   true )  nsucceses   =   PubMed . save_efetch! ( citation ,   efetch_doc ,   verbose )", 
            "title": "Export efetch response as EndNote citation file"
        }, 
        {
            "location": "/pubmed/#save-efetch-response-to-mysql-database", 
            "text": "Save the information returned by efetch to a MySQL database  dbname   =   efetch_test  host   =   127.0.0.1 ;  user   =   root  pwd   =    # Save results of efetch to database and cleanup intermediate CSV files  const   conn   =   DBUtils . init_mysql_database ( host ,   user ,   pwd ,   dbname )  PubMed . create_tables! ( conn )  PubMed . save_efetch! ( conn ,   efetch_doc ,   false ,   true )   # verbose = false, drop_csv = true", 
            "title": "Save efetch response to MySQL database"
        }, 
        {
            "location": "/pubmed/#save-efetch-response-to-sqlite-database", 
            "text": "Save the information returned by efetch to a MySQL database  db_path   =   ./test_db.db  const   conn   =   SQLite . DB ( db_path )  PubMed . create_tables! ( conn )  PubMed . save_efetch! ( conn ,   efetch_doc )", 
            "title": "Save efetch response to SQLite database"
        }, 
        {
            "location": "/pubmed/#return-efetch-response-as-a-dictionary-of-dataframes", 
            "text": "The information returned by efetch can also be returned as dataframes. The dataframes match the format of the tables that are created for the sql saving functions (schema image below). These dataframes can also easily be saved to csv files.       dfs   =   PubMed . parse ( efetch_doc ) \n\n     PubMed . dfs_to_csv ( dfs ,   my/path ,   my_file_prefix_ )", 
            "title": "Return efetch response as a dictionary of DataFrames"
        }, 
        {
            "location": "/pubmed/#exploring-output-databases", 
            "text": "The following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue           We can also explore the tables using BioMedQuery.DBUtils, e,g  tables   =   [ author_ref ,   mesh_desc ,  mesh_qual ,   mesh_heading ]  for   t   in   tables \n     query_str   =   SELECT * FROM  * t *  LIMIT 10; \n     q   =   DBUtils . db_query ( db ,   query_str ) \n     println ( q )  end", 
            "title": "Exploring output databases"
        }, 
        {
            "location": "/pubmed/#index", 
            "text": "BioMedQuery.PubMed.abstracts  BioMedQuery.PubMed.abstracts_by_year  BioMedQuery.PubMed.add_mysql_keys!  BioMedQuery.PubMed.all_mesh  BioMedQuery.PubMed.all_pmids  BioMedQuery.PubMed.citations_bibtex  BioMedQuery.PubMed.citations_endnote  BioMedQuery.PubMed.create_pmid_table!  BioMedQuery.PubMed.create_tables!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.dfs_to_csv  BioMedQuery.PubMed.dict_to_array  BioMedQuery.PubMed.drop_mysql_keys!  BioMedQuery.PubMed.get_article_mesh  BioMedQuery.PubMed.get_article_mesh_by_concept  BioMedQuery.PubMed.parse_MedlineDate  BioMedQuery.PubMed.parse_author  BioMedQuery.PubMed.parse_month  BioMedQuery.PubMed.parse_orcid  BioMedQuery.PubMed.parse_year  BioMedQuery.PubMed.remove_csvs  BioMedQuery.PubMed.remove_csvs  BioMedQuery.PubMed.save_efetch!  BioMedQuery.PubMed.save_efetch!  BioMedQuery.PubMed.save_pmids!  BioMedQuery.PubMed.strip_newline", 
            "title": "Index"
        }, 
        {
            "location": "/pubmed/#structs-and-functions", 
            "text": "#  Base.parse     Method .  parse(xml)  Parses a PubMedArticleSet that matches the NCBI-XML format  source  #  BioMedQuery.PubMed.abstracts     Method .  abstracts(db; local_medline=false)  Return all abstracts related to PMIDs in the database. If local_medline flag is set to true, it is assumed that db contains  basic  table with only PMIDs and all other info is available in a (same host) medline database  source  #  BioMedQuery.PubMed.abstracts_by_year     Method .  abstracts_by_year(db, pub_year; local_medline=false)  Return all abstracts of article published in the given year. If local_medline flag is set to true, it is assumed that db contains  article  table with only PMIDs and all other info is available in a (same host) medline database  source  #  BioMedQuery.PubMed.add_mysql_keys!     Method .  add_mysql_keys!(conn)  Adds indices/keys to MySQL PubMed tables.  source  #  BioMedQuery.PubMed.all_pmids     Method .  all_pmids(db)  Return all PMIDs stored in the  basic  table of the input database  source  #  BioMedQuery.PubMed.citations_bibtex     Function .  citations_bibtex(article::Dict{String,DataFrame}, verbose=false)  Transforms a Dictionary of pubmed dataframes into text corresponding to its bibtex citation  source  #  BioMedQuery.PubMed.citations_endnote     Function .  citations_endnote(article::Dict{String,DataFrame}, verbose=false)  Transforms a Dictionary of pubmed dataframes into text corresponding to its endnote citation  source  #  BioMedQuery.PubMed.create_pmid_table!     Method .  create_pmid_table!(conn; tablename= article )  Creates a table, using either MySQL of SQLite, to store PMIDs from Entrez related searches. All tables are empty at this point  source  #  BioMedQuery.PubMed.create_tables!     Method .  create_tables!(conn)  Create and initialize tables to save results from an Entrez/PubMed search or a medline file load. Caution, all related tables are dropped if they exist  source  #  BioMedQuery.PubMed.db_insert!     Function .  db_insert !( conn ,   articles :: Dict { String,DataFrame } ,   csv_path = pwd (),   csv_prefix = current date _PubMed_ ;   verbose = false ,   drop_csvs = false )   Writes dictionary of dataframes to a SQLite database.  Tables must already exist (see PubMed.create_tables!).  CSVs that are created during writing can be saved (default) or removed.  source  #  BioMedQuery.PubMed.db_insert!     Function .  db_insert!(conn, csv_path=pwd(), csv_prefix= current date _PubMed_ ; verbose=false, drop_csvs=false)  Writes CSVs from PubMed parsing to a MySQL database.  Tables must already exist (see PubMed.create_tables!).  CSVs can optionally be removed after being written to DB.  source  #  BioMedQuery.PubMed.db_insert!     Function .  db_insert !( conn ,   articles :: Dict { String,DataFrame } ,   csv_path = pwd (),   csv_prefix = current date _PubMed_ ;   verbose = false ,   drop_csvs = false )   Writes dictionary of dataframes to a MySQL database.  Tables must already exist (see PubMed.create_tables!).  CSVs that are created during writing can be saved (default) or removed.  source  #  BioMedQuery.PubMed.dfs_to_csv     Function .  dfs_to_csv(dfs::Dict, path::String, [file_prefix::String])  Takes output of toDataFrames and writes to CSV files at the provided path and with the file prefix.  source  #  BioMedQuery.PubMed.drop_mysql_keys!     Method .  drop_mysql_keys!(conn)  Removes keys/indices from MySQL PubMed tables.  source  #  BioMedQuery.PubMed.get_article_mesh     Method .  get_article_mesh(db, pmid)  Get the all mesh-descriptors associated with a given article  source  #  BioMedQuery.PubMed.get_article_mesh_by_concept     Method .  get_article_mesh_by_concept(db, pmid, umls_concepts...; local_medline)  Get the all mesh-descriptors associated with a given article  Arguments:   query_string: \"\" - assumes full set of results were saved by BioMedQuery directly from XML   source  #  BioMedQuery.PubMed.save_efetch!     Function .  save_efetch!(output::CitationOutput, efetch_dict, verbose=false)  Save the results of a Entrez efetch to a bibliography file, with format and file path given by  output::CitationOutput  source  #  BioMedQuery.PubMed.save_efetch!     Function .   pubmed_save_efetch(efetch_dict, conn)  Save the results (dictionary) of an entrez-pubmed fetch to the input database.  source  #  BioMedQuery.PubMed.save_pmids!     Function .   save_pmids!(conn, pmids::Vector{Int64}, verbose::Bool=false)  Save a list of PMIDS into input database.  Arguments:   conn : Database connection (MySQL or SQLite)  pmids : Array of PMIDs  verbose : Boolean to turn on extra print statements   source  #  BioMedQuery.PubMed.all_mesh     Method .  all_mesh(db)  Return all MeSH stored in the  mesh_desc  table of the input database  source  #  BioMedQuery.PubMed.dict_to_array     Method .  dict_to_array(dict::Dict)  Given a dictionary, returns a tuple of arrays with the keys and values.  source  #  BioMedQuery.PubMed.parse_MedlineDate     Method .  parse_MedlineDate(ml_dt::String)  Parses the contents of the MedlineDate element and returns a tuple of the year and month.  source  #  BioMedQuery.PubMed.parse_author     Method .  parse_author  Takes xml for author, and returns parsed elements  source  #  BioMedQuery.PubMed.parse_month     Method .  parse_month(mon::String)  Parses the string month (month or season) and returns an integer with the first month in range.  source  #  BioMedQuery.PubMed.parse_orcid     Method .  parse_orcid(raw_orc::String)  Takes a string containing an ORC ID (url, 16 digit string) and returns a formatted ID (0000-1111-2222-3333).  source  #  BioMedQuery.PubMed.parse_year     Method .  parse_year(yr::String)  Parses the string year and returns an integer with the first year in range.  source  #  BioMedQuery.PubMed.remove_csvs     Function .  remove_csvs(dfs, path, file_prefix)  Removes all of the CSV files associated with a dictionary of dataframes  source  #  BioMedQuery.PubMed.remove_csvs     Method .  remove_csvs(paths::Vector)  Removes all of the CSV files associated with an array of paths  source  #  BioMedQuery.PubMed.strip_newline     Method .  strip_newline(val::Union{Missing,String})  Replaces new line characters with spaces.  source", 
            "title": "Structs and Functions"
        }, 
        {
            "location": "/ct/", 
            "text": "Submit and save queries to \nclinicaltrials.gov\n\n\nImport\n\n\nusing NLM.CT\n\n\n\n\n\n\n\nSearch and save\n\n\n\n\nCreate a query:\n\n\nquery = Dict(\nterm\n =\n \nacne\n, \nage\n=\nInt(CT.child), \nlocn\n =\n \nNew York, NY\n)\n\n\n\n\n\nNote: The term can also indicate joint searches, e.g.\n\n\nterm\n =\n \naspirin OR ibuprofen\n\n\n\n\n\n\n\n\nSubmit and save:\n\n\nfout= \n./test_CT_search.zip\n\nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Clinical Trials"
        }, 
        {
            "location": "/ct/#import", 
            "text": "using NLM.CT", 
            "title": "Import"
        }, 
        {
            "location": "/ct/#search-and-save", 
            "text": "", 
            "title": "Search and save"
        }, 
        {
            "location": "/ct/#create-a-query", 
            "text": "query = Dict( term  =   acne ,  age = Int(CT.child),  locn  =   New York, NY )  Note: The term can also indicate joint searches, e.g.  term  =   aspirin OR ibuprofen", 
            "title": "Create a query:"
        }, 
        {
            "location": "/ct/#submit-and-save", 
            "text": "fout=  ./test_CT_search.zip \nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Submit and save:"
        }, 
        {
            "location": "/dbutils/", 
            "text": "Collection of functions that extend of simplify interactions with MySQL and SQLite databases\n\n\n\n\nImport Module\n\n\nusing BioMedQuery.DBUtils\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioMedQuery.DBUtils.assemble_cols\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_string\n\n\nBioMedQuery.DBUtils.assemble_vals\n\n\nBioMedQuery.DBUtils.col_match\n\n\nBioMedQuery.DBUtils.col_match\n\n\nBioMedQuery.DBUtils.colname_dict\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_select\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n\n\nBioMedQuery.DBUtils.init_mysql_database\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.set_innodb_checks!\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_cols\n \n \nMethod\n.\n\n\nassemble_cols(data_values::DataFrame)\n\n\n\n\n\nGiven a DataFrame, returns a column name string formatted for an insert/load statement\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n \n \nMethod\n.\n\n\nassemble_vals(data_values)\n\n\n\n\n\nGiven a dictionary containg (:column=\nvalue) return a single string properly formatted for a MySQL insert. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_string\n \n \nMethod\n.\n\n\nassemble_vals(data_values)\n\n\n\n\n\nGiven a dictionary containg (:column=\nvalue), return a single string properly formatted for a MySQL SELECT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_vals\n \n \nMethod\n.\n\n\nassemble_vals(data_values, column_names)\n\n\n\n\n\nGiven a Dict of values and the column names, return a single string properly formatted for a MySQL INSERT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.col_match\n \n \nMethod\n.\n\n\ncol_match(con, tablename, col_names)\n\n\n\n\n\nChecks if each column in the csv/data frame has a matching column in the table.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.col_match\n \n \nMethod\n.\n\n\ncol_match(con, tablename, data_values)\n\n\n\n\n\nChecks if each column in the dataframe has a matching column in the table.\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.db_query\n \n \nMethod\n.\n\n\nquery_mysql(con, query_code)\n\n\n\n\n\nExecute a mysql command\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.db_query\n \n \nMethod\n.\n\n\nquery(db, query_code)\n\n\n\n\n\nExecute a SQLite command\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.db_select\n \n \nMethod\n.\n\n\nselect_(con, colnames, tablename, data_values)\n\n\n\n\n\nPerform: SELECT colnames tablename WHERE keys(data_values)=values(data_values)\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.init_mysql_database\n \n \nFunction\n.\n\n\ninit_mysql_database(;host = \n127.0.0.1\n, dbname=\ntest\n,\nusername=\nroot\n, pswd=\n, mysql_code=nothing, overwrite=false)\n\n\n\n\n\nCreate a MySQL database using the code inside mysql_code\n\n\nArguments\n\n\n\n\nhost\n, \ndbname\n, \nuser\n, \npswd\n\n\nmysql_code::String\n: String with MySQL code that crates all default tables\n\n\noverwrite::Bool\n : Flag, if true and dbname exists, drops all database and re-creates it\n\n\n\n\nOutput\n\n\n\n\ncon\n: Database connection and table-column names map\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.insert_row!\n \n \nMethod\n.\n\n\ninsert_row!(db, tablename, values)\n\n\n\n\n\nInsert a row of values into the specified table for a given a MySQL database handle\n\n\nArguments:\n\n\n\n\ndb::MySQLDB\n: Database object (connection and map)\n\n\ndata_values::Dict{String, Any}\n: Array of (string) values\n\n\nverbose\n: Print debugginh info\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.insert_row!\n \n \nMethod\n.\n\n\ninsert_row!(db, tablename, values)\n\n\n\n\n\nInsert a row of values into the specified table for a given a SQLite database handle\n\n\nArguments:\n\n\n\n\ndb::MySQLDB\n: Database object (connection and map)\n\n\ndata_values::Dict{String, Any}\n: Array of (string) values\n\n\nverbose\n: Print debugginh info\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.select_all_tables\n \n \nMethod\n.\n\n\nselect_all_tables_mysql(con)\n\n\n\n\n\nReturn an array of all tables in a given MySQL database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.select_all_tables\n \n \nMethod\n.\n\n\nselect_all_tables_mysql(con)\n\n\n\n\n\nReturn an array of all tables in a given MySQL database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.set_innodb_checks!\n \n \nFunction\n.\n\n\nset_innodb_checks(conn, autocommit = 1, foreign_keys = 1, unique = 1)\n\n\n\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.colname_dict\n \n \nMethod\n.\n\n\ncolname_dict_(con)\n\n\n\n\n\nReturn a dictionary maping tables and their columns for a given MySQL-connection/SQLite-database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n \n \nMethod\n.\n\n\ndisable_foreign_checks(con::MySQL.MySQLHandle)\n\n\n\n\n\nDisables foreign checks for MySQL database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n \n \nMethod\n.\n\n\ndisable_foreign_checks(con::SQLite.DB)\n\n\n\n\n\nDisables foreign checks for SQLite database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n \n \nMethod\n.\n\n\nenable_foreign_checks(con::MySQL.MySQLHandle)\n\n\n\n\n\nEnables foreign checks for MySQL database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n \n \nMethod\n.\n\n\nenable_foreign_checks(con::SQLite.DB)\n\n\n\n\n\nEnables foreign checks for SQLite database\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.select_columns\n \n \nMethod\n.\n\n\nselect_columns_mysql(con, table)\n\n\n\n\n\nFor a MySQL database, return an array of all columns in the given table\n\n\nsource\n\n\n#\n\n\nBioMedQuery.DBUtils.select_columns\n \n \nMethod\n.\n\n\nselect_columns(db, table)\n\n\n\n\n\nReturn an array with names of columns in the given table\n\n\nsource", 
            "title": "Database Utilities"
        }, 
        {
            "location": "/dbutils/#import-module", 
            "text": "using BioMedQuery.DBUtils", 
            "title": "Import Module"
        }, 
        {
            "location": "/dbutils/#index", 
            "text": "BioMedQuery.DBUtils.assemble_cols  BioMedQuery.DBUtils.assemble_cols_and_vals  BioMedQuery.DBUtils.assemble_cols_and_vals_string  BioMedQuery.DBUtils.assemble_vals  BioMedQuery.DBUtils.col_match  BioMedQuery.DBUtils.col_match  BioMedQuery.DBUtils.colname_dict  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_select  BioMedQuery.DBUtils.disable_foreign_checks  BioMedQuery.DBUtils.disable_foreign_checks  BioMedQuery.DBUtils.enable_foreign_checks  BioMedQuery.DBUtils.enable_foreign_checks  BioMedQuery.DBUtils.init_mysql_database  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.set_innodb_checks!", 
            "title": "Index"
        }, 
        {
            "location": "/dbutils/#functions", 
            "text": "#  BioMedQuery.DBUtils.assemble_cols     Method .  assemble_cols(data_values::DataFrame)  Given a DataFrame, returns a column name string formatted for an insert/load statement  source  #  BioMedQuery.DBUtils.assemble_cols_and_vals     Method .  assemble_vals(data_values)  Given a dictionary containg (:column= value) return a single string properly formatted for a MySQL insert. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  source  #  BioMedQuery.DBUtils.assemble_cols_and_vals_string     Method .  assemble_vals(data_values)  Given a dictionary containg (:column= value), return a single string properly formatted for a MySQL SELECT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  source  #  BioMedQuery.DBUtils.assemble_vals     Method .  assemble_vals(data_values, column_names)  Given a Dict of values and the column names, return a single string properly formatted for a MySQL INSERT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  source  #  BioMedQuery.DBUtils.col_match     Method .  col_match(con, tablename, col_names)  Checks if each column in the csv/data frame has a matching column in the table.  source  #  BioMedQuery.DBUtils.col_match     Method .  col_match(con, tablename, data_values)  Checks if each column in the dataframe has a matching column in the table.  source  #  BioMedQuery.DBUtils.db_query     Method .  query_mysql(con, query_code)  Execute a mysql command  source  #  BioMedQuery.DBUtils.db_query     Method .  query(db, query_code)  Execute a SQLite command  source  #  BioMedQuery.DBUtils.db_select     Method .  select_(con, colnames, tablename, data_values)  Perform: SELECT colnames tablename WHERE keys(data_values)=values(data_values)  source  #  BioMedQuery.DBUtils.init_mysql_database     Function .  init_mysql_database(;host =  127.0.0.1 , dbname= test ,\nusername= root , pswd= , mysql_code=nothing, overwrite=false)  Create a MySQL database using the code inside mysql_code  Arguments   host ,  dbname ,  user ,  pswd  mysql_code::String : String with MySQL code that crates all default tables  overwrite::Bool  : Flag, if true and dbname exists, drops all database and re-creates it   Output   con : Database connection and table-column names map   source  #  BioMedQuery.DBUtils.insert_row!     Method .  insert_row!(db, tablename, values)  Insert a row of values into the specified table for a given a MySQL database handle  Arguments:   db::MySQLDB : Database object (connection and map)  data_values::Dict{String, Any} : Array of (string) values  verbose : Print debugginh info   source  #  BioMedQuery.DBUtils.insert_row!     Method .  insert_row!(db, tablename, values)  Insert a row of values into the specified table for a given a SQLite database handle  Arguments:   db::MySQLDB : Database object (connection and map)  data_values::Dict{String, Any} : Array of (string) values  verbose : Print debugginh info   source  #  BioMedQuery.DBUtils.select_all_tables     Method .  select_all_tables_mysql(con)  Return an array of all tables in a given MySQL database  source  #  BioMedQuery.DBUtils.select_all_tables     Method .  select_all_tables_mysql(con)  Return an array of all tables in a given MySQL database  source  #  BioMedQuery.DBUtils.set_innodb_checks!     Function .  set_innodb_checks(conn, autocommit = 1, foreign_keys = 1, unique = 1)  source  #  BioMedQuery.DBUtils.colname_dict     Method .  colname_dict_(con)  Return a dictionary maping tables and their columns for a given MySQL-connection/SQLite-database  source  #  BioMedQuery.DBUtils.disable_foreign_checks     Method .  disable_foreign_checks(con::MySQL.MySQLHandle)  Disables foreign checks for MySQL database  source  #  BioMedQuery.DBUtils.disable_foreign_checks     Method .  disable_foreign_checks(con::SQLite.DB)  Disables foreign checks for SQLite database  source  #  BioMedQuery.DBUtils.enable_foreign_checks     Method .  enable_foreign_checks(con::MySQL.MySQLHandle)  Enables foreign checks for MySQL database  source  #  BioMedQuery.DBUtils.enable_foreign_checks     Method .  enable_foreign_checks(con::SQLite.DB)  Enables foreign checks for SQLite database  source  #  BioMedQuery.DBUtils.select_columns     Method .  select_columns_mysql(con, table)  For a MySQL database, return an array of all columns in the given table  source  #  BioMedQuery.DBUtils.select_columns     Method .  select_columns(db, table)  Return an array with names of columns in the given table  source", 
            "title": "Functions"
        }, 
        {
            "location": "/library/", 
            "text": "Index\n\n\n\n\nBase.parse\n\n\nBioMedQuery.DBUtils.assemble_cols\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_string\n\n\nBioMedQuery.DBUtils.assemble_vals\n\n\nBioMedQuery.DBUtils.col_match\n\n\nBioMedQuery.DBUtils.col_match\n\n\nBioMedQuery.DBUtils.colname_dict\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_select\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n\n\nBioMedQuery.DBUtils.disable_foreign_checks\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n\n\nBioMedQuery.DBUtils.enable_foreign_checks\n\n\nBioMedQuery.DBUtils.init_mysql_database\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.set_innodb_checks!\n\n\nBioMedQuery.Processes.close_cons\n\n\nBioMedQuery.Processes.export_citation\n\n\nBioMedQuery.Processes.export_citation\n\n\nBioMedQuery.Processes.get_file_name\n\n\nBioMedQuery.Processes.get_ftp_con\n\n\nBioMedQuery.Processes.get_ml_file\n\n\nBioMedQuery.Processes.init_medline\n\n\nBioMedQuery.Processes.load_medline!\n\n\nBioMedQuery.Processes.map_mesh_to_umls!\n\n\nBioMedQuery.Processes.map_mesh_to_umls_async!\n\n\nBioMedQuery.Processes.parse_ml_file\n\n\nBioMedQuery.Processes.pubmed_search_and_parse\n\n\nBioMedQuery.Processes.pubmed_search_and_save!\n\n\nBioMedQuery.Processes.umls_semantic_occurrences\n\n\nBioMedQuery.PubMed.abstracts\n\n\nBioMedQuery.PubMed.abstracts_by_year\n\n\nBioMedQuery.PubMed.add_mysql_keys!\n\n\nBioMedQuery.PubMed.all_mesh\n\n\nBioMedQuery.PubMed.all_pmids\n\n\nBioMedQuery.PubMed.citations_bibtex\n\n\nBioMedQuery.PubMed.citations_endnote\n\n\nBioMedQuery.PubMed.create_pmid_table!\n\n\nBioMedQuery.PubMed.create_tables!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.db_insert!\n\n\nBioMedQuery.PubMed.dfs_to_csv\n\n\nBioMedQuery.PubMed.dict_to_array\n\n\nBioMedQuery.PubMed.drop_mysql_keys!\n\n\nBioMedQuery.PubMed.get_article_mesh\n\n\nBioMedQuery.PubMed.get_article_mesh_by_concept\n\n\nBioMedQuery.PubMed.parse_MedlineDate\n\n\nBioMedQuery.PubMed.parse_author\n\n\nBioMedQuery.PubMed.parse_month\n\n\nBioMedQuery.PubMed.parse_orcid\n\n\nBioMedQuery.PubMed.parse_year\n\n\nBioMedQuery.PubMed.remove_csvs\n\n\nBioMedQuery.PubMed.remove_csvs\n\n\nBioMedQuery.PubMed.save_efetch!\n\n\nBioMedQuery.PubMed.save_efetch!\n\n\nBioMedQuery.PubMed.save_pmids!\n\n\nBioMedQuery.PubMed.strip_newline", 
            "title": "Library"
        }, 
        {
            "location": "/library/#index", 
            "text": "Base.parse  BioMedQuery.DBUtils.assemble_cols  BioMedQuery.DBUtils.assemble_cols_and_vals  BioMedQuery.DBUtils.assemble_cols_and_vals_string  BioMedQuery.DBUtils.assemble_vals  BioMedQuery.DBUtils.col_match  BioMedQuery.DBUtils.col_match  BioMedQuery.DBUtils.colname_dict  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_select  BioMedQuery.DBUtils.disable_foreign_checks  BioMedQuery.DBUtils.disable_foreign_checks  BioMedQuery.DBUtils.enable_foreign_checks  BioMedQuery.DBUtils.enable_foreign_checks  BioMedQuery.DBUtils.init_mysql_database  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.set_innodb_checks!  BioMedQuery.Processes.close_cons  BioMedQuery.Processes.export_citation  BioMedQuery.Processes.export_citation  BioMedQuery.Processes.get_file_name  BioMedQuery.Processes.get_ftp_con  BioMedQuery.Processes.get_ml_file  BioMedQuery.Processes.init_medline  BioMedQuery.Processes.load_medline!  BioMedQuery.Processes.map_mesh_to_umls!  BioMedQuery.Processes.map_mesh_to_umls_async!  BioMedQuery.Processes.parse_ml_file  BioMedQuery.Processes.pubmed_search_and_parse  BioMedQuery.Processes.pubmed_search_and_save!  BioMedQuery.Processes.umls_semantic_occurrences  BioMedQuery.PubMed.abstracts  BioMedQuery.PubMed.abstracts_by_year  BioMedQuery.PubMed.add_mysql_keys!  BioMedQuery.PubMed.all_mesh  BioMedQuery.PubMed.all_pmids  BioMedQuery.PubMed.citations_bibtex  BioMedQuery.PubMed.citations_endnote  BioMedQuery.PubMed.create_pmid_table!  BioMedQuery.PubMed.create_tables!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.db_insert!  BioMedQuery.PubMed.dfs_to_csv  BioMedQuery.PubMed.dict_to_array  BioMedQuery.PubMed.drop_mysql_keys!  BioMedQuery.PubMed.get_article_mesh  BioMedQuery.PubMed.get_article_mesh_by_concept  BioMedQuery.PubMed.parse_MedlineDate  BioMedQuery.PubMed.parse_author  BioMedQuery.PubMed.parse_month  BioMedQuery.PubMed.parse_orcid  BioMedQuery.PubMed.parse_year  BioMedQuery.PubMed.remove_csvs  BioMedQuery.PubMed.remove_csvs  BioMedQuery.PubMed.save_efetch!  BioMedQuery.PubMed.save_efetch!  BioMedQuery.PubMed.save_pmids!  BioMedQuery.PubMed.strip_newline", 
            "title": "Index"
        }
    ]
}