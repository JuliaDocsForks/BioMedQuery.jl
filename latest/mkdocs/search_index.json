{
    "docs": [
        {
            "location": "/", 
            "text": "BioMedQuery Julia Package\n\n\nJulia utilities to interact with BioMedical databases/APIs. Supported databases/APIS include:\n\n\nNational Library of Medicine (NLM)\n\n\n\n\nEntrez Programming Utilities \n(E-Utilities)\n\n\nUnified Medical Language System \n(UMLS)\n\n\nClinical Trials \n(clinicaltrials.gov)\n\n\n\n\n\n\nInstallation\n\n\nBioMedQuery is a registered package. To install the latest stable version, use the package manager.\n\n\nPkg.add(\nBioMedQuery\n)\n\n\n\n\n\n\nDependencies\n\n\nRegistered Packages - automatically installed\n\n\n\n\nArgParse\n\n\nSQLite\n\n\nMySQL\n\n\nGumbo\n\n\nRequests\n\n\nDataStreams\n\n\nLightXML\n\n\nRequests\n\n\nHttpCommon\n\n\nBaseTestNext\n\n\nXMLconvert\n\n\n\n\n\n\nSister Packages\n\n\n\n\nPubMedMiner\n - Executables to search PubMed, link Mesh Descriptors to to UMLS concepts and visualize results.\n\n\nXMLConvert\n - Utilities to convert, flatten and explore XML file. Useful to investigate server responses.", 
            "title": "Overview"
        }, 
        {
            "location": "/#biomedquery-julia-package", 
            "text": "Julia utilities to interact with BioMedical databases/APIs. Supported databases/APIS include:  National Library of Medicine (NLM)   Entrez Programming Utilities  (E-Utilities)  Unified Medical Language System  (UMLS)  Clinical Trials  (clinicaltrials.gov)", 
            "title": "BioMedQuery Julia Package"
        }, 
        {
            "location": "/#installation", 
            "text": "BioMedQuery is a registered package. To install the latest stable version, use the package manager.  Pkg.add( BioMedQuery )", 
            "title": "Installation"
        }, 
        {
            "location": "/#dependencies", 
            "text": "", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#registered-packages-automatically-installed", 
            "text": "ArgParse  SQLite  MySQL  Gumbo  Requests  DataStreams  LightXML  Requests  HttpCommon  BaseTestNext  XMLconvert", 
            "title": "Registered Packages - automatically installed"
        }, 
        {
            "location": "/#sister-packages", 
            "text": "PubMedMiner  - Executables to search PubMed, link Mesh Descriptors to to UMLS concepts and visualize results.  XMLConvert  - Utilities to convert, flatten and explore XML file. Useful to investigate server responses.", 
            "title": "Sister Packages"
        }, 
        {
            "location": "/entrez/", 
            "text": "Julia interface to \nEntrez Utilities API\n.\n\n\nFor executables that use this package to search PubMed, see the sister package \nPubMedMiner\n\n\n\n\nImport Module\n\n\nusing BioMedQuery.Entrez\n\n\n\n\nThe following E-utils functions have been implemented:\n\n\n\n\nESearch\n\n\nEFetch\n\n\nELink\n\n\nESummary\n\n\n\n\nThe following utility functions are available to handle and store NCBI responses\n\n\n\n\nEParse\n - Convert XML response to Julia Dict\n\n\nSaving NCBI Responses to XML\n\n\nSaving EFetch to a SQLite database\n\n\nSaving EFetch to a MySQL database\n\n\n\n\nThe following utility functions are available to query the database\n\n\n\n\nAll PMIDs\n\n\nAll MESH descriptors for an article\n\n\n\n\n\n\nESearch\n\n\n#\n\n\nBioMedQuery.Entrez.esearch\n \n \nMethod\n.\n\n\nesearch(search_dict)\n\n\n\n\nRequest list of UIDs matiching a query - see \nNCBI Entrez:Esearch\n\n\nArguments\n\n\n\n\nsearch_dic::Dict\n: dictionary specifying search criteria\n\n\n\n\nOutput\n\n\n\n\n::ASCIIString\n: XML response from NCBI\n\n\n\n\nExample\n\n\nsearch_dic = Dict(\ndb\n=\npubmed\n, \nterm\n =\n search_term,\n\nretstart\n =\n 0, \nretmax\n=\n5, \ntool\n =\nBioJulia\n,\n\nemail\n =\n \nemail\n)\nesearch_response = esearch(search_dic)\n\n\n\n\nNote\n\n\n\n\nemail must be a valid email address (otherwise pubmed will block you)\n\n\nsearch_term corresponds to a valid \nPubMed Search\n. It may contain one or more filtering criteria using AND/OR. For instance:\n\n\n\n\nsearch_term = (asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication])\n.\n\n\n\n\nEFetch\n\n\n#\n\n\nBioMedQuery.Entrez.efetch\n \n \nMethod\n.\n\n\nefetch(fetch_dic, id_list)\n\n\n\n\nRetrieve data records from a list of UIDs - see \nNCBI Entrez: EFetch\n\n\nArguments\n\n\n\n\nfetch_dic::Dict\n - Dictionary specifying fetch criteria\n\n\nid_list::Array\n - List of ids e.g those embedded in response from esearch\n\n\n\n\nResults\n\n\n\n\n::ASCIIString\n - XML response from NCBI\n\n\n\n\nExample\n\n\n# get the list of ids\nif !haskey(esearch_dict, \nIdList\n)\n  error(\nError: IdList not found\n)\nend\n\nids = []\n\nfor id_node in esearch_dict[\nIdList\n][1][\nId\n]\n  push!(ids, id_node)\nend\n\n# define the fetch dictionary\nfetch_dic = Dict(\ndb\n=\npubmed\n,\ntool\n =\nBioJulia\n,\n\nemail\n =\n email, \nretmode\n =\n \nxml\n, \nrettype\n=\nnull\n)\n\n# fetch\nefetch_response = efetch(fetch_dic, ids)\n\n\n\n\n\n\nELink\n\n\n#\n\n\nBioMedQuery.Entrez.elink\n \n \nMethod\n.\n\n\nelink(elink_dict)\n\n\n\n\nLists, checks or returns UIDs linked to an input list of UIDs in the same or different Entrez database. For more info see \nNCBI Entrez:ELink\n\n\nArguments\n\n\n\n\nelink_dict::Dict\n: dictionary specifying elink inputs as credentials, ids...\n\n\n\n\nOutput\n\n\n\n\n::ASCIIString\n: XML response from NCBI\n\n\n\n\nExample\n\n\npmid = \n19304878\n\nelink_dict = Dict(\ndbfrom\n =\npubmed\n, \nid\n =\n pmid,\n                  \nlinkname\n =\n \npubmed_pubmed\n, \nemail\n=\nemail)\nelink_response = elink(elink_dict)\n\n\n\n\n\n\nESummary\n\n\n#\n\n\nBioMedQuery.Entrez.esummary\n \n \nMethod\n.\n\n\nesummary(esummary_dict)\n\n\n\n\nReturn document summaries for a list of input UIDs. For more info see \nNCBI Entrez:ESummary\n\n\nArguments\n\n\n\n\nesummary_dict::Dict\n: dictionary specifying esummary inputs as credentials, ids...\n\n\n\n\nOutput\n\n\n\n\n::ASCIIString\n: XML response from NCBI\n\n\n\n\nExample\n\n\npmid = \n30367\n\nesummary_dict = Dict(\ndb\n =\npubmed\n, \nid\n =\n pmid, \nemail\n=\nemail)\nesummary_response = esummary(esummary_dict)\n\n\n\n\n\n\nEParse\n\n\n#\n\n\nBioMedQuery.Entrez.eparse\n \n \nMethod\n.\n\n\neparse(response::ASCIIString)\n\n\n\n\nConverts NCBI XML response into a Julia dictionary\n\n\n\n\nSaving NCBI Responses to XML\n\n\nYou can save directly the XML String to file using the \nXMLconvert Package\n\n\nExample\n\n\n    XMLconvert.xmlASCII2file(efetch_response, \n./efetch.xml\n)\n\n\n\n\n\n\nSaving EFetch to a SQLite database\n\n\n#\n\n\nBioMedQuery.Entrez.save_efetch_sqlite\n \n \nMethod\n.\n\n\nsave_efetch_sqlite(efetch_dict, db_config, verbose)\n\n\nSave the results (dictionary) of an entrez fetch to a SQLite database.\n\n\nArguments:\n\n\n\n\nefetch_dict\n: Response dictionary from efetch\n\n\ndb_config::Dict{Symbol, T}\n: Configuration dictionary for initialitizing SQLite database. Must contain symbols \n:db_path\n and \n:overwrite\n\n\nverbose\n: Boolean to turn on extra print statements\n\n\n\n\nExample\n\n\ndb_config =  Dict(:db_path=\ntest_db.slqite\n, :overwrite=\ntrue)\ndb = save_efetch_sqlite(efetch_dict, db_config)\n\n\n\n\n\n\nSaving EFetch to a MySQL database\n\n\n#\n\n\nBioMedQuery.Entrez.save_efetch_mysql\n \n \nMethod\n.\n\n\nsave_efetch_mysql(efetch_dict, db_config, verbose)\n\n\nSave the results (dictionary) of an entrez fetch to a MySQL database.\n\n\nArguments:\n\n\n\n\nefetch_dict\n: Response dictionary from efetch\n\n\ndb_config::Dict{Symbol, T}\n: Configuration dictionary for initialitizing SQLite database. Must contain symbols \n:host\n, \n:dbname\n, \n:username\n. \npswd\n, and \n:overwrite\n\n\nverbose\n: Boolean to turn on extra print statements\n\n\n\n\nExample\n\n\ndb_config =  Dict(:host=\nlocalhost\n, :dbname=\ntest\n, :username=\nroot\n,\n:pswd=\n, :overwrite=\ntrue)\ndb = save_efetch_mysql(efetch_dict, db_config)\n\n\n\n\nThe following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue\n\n\n\n\n\n\nAll PMIDs\n\n\n#\n\n\nBioMedQuery.Entrez.DB.all_pmids\n \n \nMethod\n.\n\n\nall_pmids(db)\n\n\n\n\nReturn all PMIDs stored in the \narticle\n table of the input database\n\n\n\n\nAll MESH descriptors for an article\n\n\n#\n\n\nBioMedQuery.Entrez.DB.get_article_mesh\n \n \nMethod\n.\n\n\nget_article_mesh(db, pmid)\n\n\n\n\nGet the all mesh-descriptors associated with a give article", 
            "title": "Entrez"
        }, 
        {
            "location": "/entrez/#import-module", 
            "text": "using BioMedQuery.Entrez  The following E-utils functions have been implemented:   ESearch  EFetch  ELink  ESummary   The following utility functions are available to handle and store NCBI responses   EParse  - Convert XML response to Julia Dict  Saving NCBI Responses to XML  Saving EFetch to a SQLite database  Saving EFetch to a MySQL database   The following utility functions are available to query the database   All PMIDs  All MESH descriptors for an article", 
            "title": "Import Module"
        }, 
        {
            "location": "/entrez/#esearch", 
            "text": "#  BioMedQuery.Entrez.esearch     Method .  esearch(search_dict)  Request list of UIDs matiching a query - see  NCBI Entrez:Esearch", 
            "title": "ESearch"
        }, 
        {
            "location": "/entrez/#arguments", 
            "text": "search_dic::Dict : dictionary specifying search criteria", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#output", 
            "text": "::ASCIIString : XML response from NCBI", 
            "title": "Output"
        }, 
        {
            "location": "/entrez/#example", 
            "text": "search_dic = Dict( db = pubmed ,  term  =  search_term, retstart  =  0,  retmax = 5,  tool  = BioJulia , email  =   email )\nesearch_response = esearch(search_dic)", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#note", 
            "text": "email must be a valid email address (otherwise pubmed will block you)  search_term corresponds to a valid  PubMed Search . It may contain one or more filtering criteria using AND/OR. For instance:   search_term = (asthma[MeSH Terms]) AND (\"2001/01/29\"[Date - Publication] : \"2010\"[Date - Publication]) .", 
            "title": "Note"
        }, 
        {
            "location": "/entrez/#efetch", 
            "text": "#  BioMedQuery.Entrez.efetch     Method .  efetch(fetch_dic, id_list)  Retrieve data records from a list of UIDs - see  NCBI Entrez: EFetch", 
            "title": "EFetch"
        }, 
        {
            "location": "/entrez/#arguments_1", 
            "text": "fetch_dic::Dict  - Dictionary specifying fetch criteria  id_list::Array  - List of ids e.g those embedded in response from esearch", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#results", 
            "text": "::ASCIIString  - XML response from NCBI", 
            "title": "Results"
        }, 
        {
            "location": "/entrez/#example_1", 
            "text": "# get the list of ids\nif !haskey(esearch_dict,  IdList )\n  error( Error: IdList not found )\nend\n\nids = []\n\nfor id_node in esearch_dict[ IdList ][1][ Id ]\n  push!(ids, id_node)\nend\n\n# define the fetch dictionary\nfetch_dic = Dict( db = pubmed , tool  = BioJulia , email  =  email,  retmode  =   xml ,  rettype = null )\n\n# fetch\nefetch_response = efetch(fetch_dic, ids)", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#elink", 
            "text": "#  BioMedQuery.Entrez.elink     Method .  elink(elink_dict)  Lists, checks or returns UIDs linked to an input list of UIDs in the same or different Entrez database. For more info see  NCBI Entrez:ELink", 
            "title": "ELink"
        }, 
        {
            "location": "/entrez/#arguments_2", 
            "text": "elink_dict::Dict : dictionary specifying elink inputs as credentials, ids...", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#output_1", 
            "text": "::ASCIIString : XML response from NCBI", 
            "title": "Output"
        }, 
        {
            "location": "/entrez/#example_2", 
            "text": "pmid =  19304878 \nelink_dict = Dict( dbfrom  = pubmed ,  id  =  pmid,\n                   linkname  =   pubmed_pubmed ,  email = email)\nelink_response = elink(elink_dict)", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#esummary", 
            "text": "#  BioMedQuery.Entrez.esummary     Method .  esummary(esummary_dict)  Return document summaries for a list of input UIDs. For more info see  NCBI Entrez:ESummary", 
            "title": "ESummary"
        }, 
        {
            "location": "/entrez/#arguments_3", 
            "text": "esummary_dict::Dict : dictionary specifying esummary inputs as credentials, ids...", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#output_2", 
            "text": "::ASCIIString : XML response from NCBI", 
            "title": "Output"
        }, 
        {
            "location": "/entrez/#example_3", 
            "text": "pmid =  30367 \nesummary_dict = Dict( db  = pubmed ,  id  =  pmid,  email = email)\nesummary_response = esummary(esummary_dict)", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#eparse", 
            "text": "#  BioMedQuery.Entrez.eparse     Method .  eparse(response::ASCIIString)  Converts NCBI XML response into a Julia dictionary", 
            "title": "EParse"
        }, 
        {
            "location": "/entrez/#saving-ncbi-responses-to-xml", 
            "text": "You can save directly the XML String to file using the  XMLconvert Package", 
            "title": "Saving NCBI Responses to XML"
        }, 
        {
            "location": "/entrez/#example_4", 
            "text": "XMLconvert.xmlASCII2file(efetch_response,  ./efetch.xml )", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#saving-efetch-to-a-sqlite-database", 
            "text": "#  BioMedQuery.Entrez.save_efetch_sqlite     Method .  save_efetch_sqlite(efetch_dict, db_config, verbose)  Save the results (dictionary) of an entrez fetch to a SQLite database.", 
            "title": "Saving EFetch to a SQLite database"
        }, 
        {
            "location": "/entrez/#arguments_4", 
            "text": "efetch_dict : Response dictionary from efetch  db_config::Dict{Symbol, T} : Configuration dictionary for initialitizing SQLite database. Must contain symbols  :db_path  and  :overwrite  verbose : Boolean to turn on extra print statements", 
            "title": "Arguments:"
        }, 
        {
            "location": "/entrez/#example_5", 
            "text": "db_config =  Dict(:db_path= test_db.slqite , :overwrite= true)\ndb = save_efetch_sqlite(efetch_dict, db_config)", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#saving-efetch-to-a-mysql-database", 
            "text": "#  BioMedQuery.Entrez.save_efetch_mysql     Method .  save_efetch_mysql(efetch_dict, db_config, verbose)  Save the results (dictionary) of an entrez fetch to a MySQL database.", 
            "title": "Saving EFetch to a MySQL database"
        }, 
        {
            "location": "/entrez/#arguments_5", 
            "text": "efetch_dict : Response dictionary from efetch  db_config::Dict{Symbol, T} : Configuration dictionary for initialitizing SQLite database. Must contain symbols  :host ,  :dbname ,  :username .  pswd , and  :overwrite  verbose : Boolean to turn on extra print statements", 
            "title": "Arguments:"
        }, 
        {
            "location": "/entrez/#example_6", 
            "text": "db_config =  Dict(:host= localhost , :dbname= test , :username= root ,\n:pswd= , :overwrite= true)\ndb = save_efetch_mysql(efetch_dict, db_config)  The following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue", 
            "title": "Example"
        }, 
        {
            "location": "/entrez/#all-pmids", 
            "text": "#  BioMedQuery.Entrez.DB.all_pmids     Method .  all_pmids(db)  Return all PMIDs stored in the  article  table of the input database", 
            "title": "All PMIDs"
        }, 
        {
            "location": "/entrez/#all-mesh-descriptors-for-an-article", 
            "text": "#  BioMedQuery.Entrez.DB.get_article_mesh     Method .  get_article_mesh(db, pmid)  Get the all mesh-descriptors associated with a give article", 
            "title": "All MESH descriptors for an article"
        }, 
        {
            "location": "/umls/", 
            "text": "Search the Unified Medical Language System (UMLS), for more details visit the \nREST API\n.\n\n\nSearching the UMLS requires approved credentials. You can sign up [here]](https://uts.nlm.nih.gov//license.html)\n\n\nImport\n\n\nusing BioMedQuery.UMLS\n\n\n\n\n\n\nCredentials\n\n\n#\n\n\nBioMedQuery.UMLS.Credentials\n \n \nType\n.\n\n\nCredentials(user, psswd)\n\n\n\n\n\n\nSearch the UMLS\n\n\n#\n\n\nBioMedQuery.UMLS.search_umls\n \n \nMethod\n.\n\n\nsearch_umls(c::Credentials, query)\n\n\n\n\nSearch UMLS Rest API. For more info see \nUMLS_API\n\n\nArguments\n\n\n\n\nc::Credentials\n: UMLS username and password\n\n\nquery\n: UMLS query containing the search term\n\n\nversion:\n Optional - defaults to current\n\n\n\n\nOutput\n\n\n\n\nresult_pages\n: Array, where each entry is a dictionary containing a page of results. e.g  \nDict{AbstractString,Any} with 3 entries:   \"pageSize\"   =\n 25    \"pageNumber\" =\n 1   \"result\"     =\n Dict{AbstractString,Any}(\"classType\"=\n\"searchResults\",\"result\u2026\n\n\n\n\nExamples\n\n\ncredentials = Credentials(user, psswd)\ntgt = get_tgt(credentials)\nterm = \nobesity\n\nquery = Dict(\nstring\n=\nterm, \nsearchType\n=\nexact\n )\nall_results= search_umls(tgt, query)\n\n\n\n\n\n\nBest match CUI\n\n\n#\n\n\nBioMedQuery.UMLS.best_match_cui\n \n \nMethod\n.\n\n\nbest_match_cui(result_pages)\n\n\n\n\nRetrive the best match from array of all result pages\n\n\nExample\n\n\ncui = BioMedQuery.UMLS.best_match_cui(all_results)\n\n\n\n\n\n\nSemantic types of a CUI\n\n\n#\n\n\nBioMedQuery.UMLS.get_semantic_type\n \n \nMethod\n.\n\n\nget_semantic_type(c::Credentials, cui)\n\n\n\n\nReturn an array of the semantic types associated with a cui\n\n\nExample\n\n\ncredentials = Credentials(user, psswd)\ntgt = get_tgt(credentials)\ncui = \nC0028754\n\nsm = BioMedQuery.UMLS.get_semantic_type(tgt, cui)", 
            "title": "UMLS"
        }, 
        {
            "location": "/umls/#import", 
            "text": "using BioMedQuery.UMLS", 
            "title": "Import"
        }, 
        {
            "location": "/umls/#credentials", 
            "text": "#  BioMedQuery.UMLS.Credentials     Type .  Credentials(user, psswd)", 
            "title": "Credentials"
        }, 
        {
            "location": "/umls/#search-the-umls", 
            "text": "#  BioMedQuery.UMLS.search_umls     Method .  search_umls(c::Credentials, query)  Search UMLS Rest API. For more info see  UMLS_API", 
            "title": "Search the UMLS"
        }, 
        {
            "location": "/umls/#arguments", 
            "text": "c::Credentials : UMLS username and password  query : UMLS query containing the search term  version:  Optional - defaults to current", 
            "title": "Arguments"
        }, 
        {
            "location": "/umls/#output", 
            "text": "result_pages : Array, where each entry is a dictionary containing a page of results. e.g   Dict{AbstractString,Any} with 3 entries:   \"pageSize\"   =  25    \"pageNumber\" =  1   \"result\"     =  Dict{AbstractString,Any}(\"classType\"= \"searchResults\",\"result\u2026", 
            "title": "Output"
        }, 
        {
            "location": "/umls/#examples", 
            "text": "credentials = Credentials(user, psswd)\ntgt = get_tgt(credentials)\nterm =  obesity \nquery = Dict( string = term,  searchType = exact  )\nall_results= search_umls(tgt, query)", 
            "title": "Examples"
        }, 
        {
            "location": "/umls/#best-match-cui", 
            "text": "#  BioMedQuery.UMLS.best_match_cui     Method .  best_match_cui(result_pages)  Retrive the best match from array of all result pages", 
            "title": "Best match CUI"
        }, 
        {
            "location": "/umls/#example", 
            "text": "cui = BioMedQuery.UMLS.best_match_cui(all_results)", 
            "title": "Example"
        }, 
        {
            "location": "/umls/#semantic-types-of-a-cui", 
            "text": "#  BioMedQuery.UMLS.get_semantic_type     Method .  get_semantic_type(c::Credentials, cui)  Return an array of the semantic types associated with a cui", 
            "title": "Semantic types of a CUI"
        }, 
        {
            "location": "/umls/#example_1", 
            "text": "credentials = Credentials(user, psswd)\ntgt = get_tgt(credentials)\ncui =  C0028754 \nsm = BioMedQuery.UMLS.get_semantic_type(tgt, cui)", 
            "title": "Example"
        }, 
        {
            "location": "/ct/", 
            "text": "Submit and save queries to \nclinicaltrials.gov\n\n\nImport\n\n\nusing NLM.CT\n\n\n\n\n\n\nSearch and save\n\n\n\n\nCreate a query:\n\n\nquery = Dict(\nterm\n =\n \nacne\n, \nage\n=\nInt(CT.child), \nlocn\n =\n \nNew York, NY\n)\n\n\n\n\nNote: The term can also indicate joint searches, e.g.\n\n\nterm\n =\n \naspirin OR ibuprofen\n\n\n\n\n\n\n\nSubmit and save:\n\n\nfout= \n./test_CT_search.zip\n\nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Clinical Trials"
        }, 
        {
            "location": "/ct/#import", 
            "text": "using NLM.CT", 
            "title": "Import"
        }, 
        {
            "location": "/ct/#search-and-save", 
            "text": "", 
            "title": "Search and save"
        }, 
        {
            "location": "/ct/#create-a-query", 
            "text": "query = Dict( term  =   acne ,  age = Int(CT.child),  locn  =   New York, NY )  Note: The term can also indicate joint searches, e.g.  term  =   aspirin OR ibuprofen", 
            "title": "Create a query:"
        }, 
        {
            "location": "/ct/#submit-and-save", 
            "text": "fout=  ./test_CT_search.zip \nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Submit and save:"
        }, 
        {
            "location": "/dbutils/", 
            "text": "Collection of functions that extend of simplify interactions with MySQL and SQLite databases\n\n\n\n\nImport Module\n\n\nusing BioMedQuery.DBUtils\n\n\n\n\n\n\nIndex\n\n\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_select\n\n\nBioMedQuery.DBUtils.assemble_vals\n\n\nBioMedQuery.DBUtils.colname_dict\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_select\n\n\nBioMedQuery.DBUtils.init_mysql_database\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.select_columns\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_vals\n \n \nMethod\n.\n\n\nassemble_vals(data_values, column_names)\n\n\n\n\nGiven a Dict of values and the column names, return a single string properly formatted for a MySQL INSERT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\n#\n\n\nBioMedQuery.DBUtils.db_query\n \n \nMethod\n.\n\n\nquery_mysql(con, query_code)\n\n\n\n\nExecute a mysql command\n\n\n#\n\n\nBioMedQuery.DBUtils.db_query\n \n \nMethod\n.\n\n\nquery(db, query_code)\n\n\n\n\nExecute a SQLite command\n\n\n#\n\n\nBioMedQuery.DBUtils.db_select\n \n \nMethod\n.\n\n\nselect_(con, colnames, tablename, data_values)\n\n\n\n\nPerform: SELECT colnames tablename WHERE keys(data_values)=values(data_values)\n\n\n#\n\n\nBioMedQuery.DBUtils.init_mysql_database\n \n \nMethod\n.\n\n\ninit_mysql_database(;host = \nlocalhost\n, dbname=\ntest\n,\nusername=\nroot\n, pswd=\n, mysql_code=nothing, overwrite=false)\n\n\n\n\nCreate a MySQL database using the code inside mysql_code\n\n\nArguments\n\n\n\n\nhost\n, \ndbname\n, \nuser\n, \npswd\n\n\nmysql_code::ASCIIString\n: String with MySQL code that crates all default tables\n\n\noverwrite::Bool\n : Flag, if true and dbname exists, it deletes it\n\n\n\n\nOutput\n\n\n\n\ncon\n: Database connection and table-column names map\n\n\n\n\n#\n\n\nBioMedQuery.DBUtils.insert_row!\n \n \nFunction\n.\n\n\ninsert_row!(db, tablename, values)\n\n\n\n\nInsert a row of values into the specified table for a given a SQLite database handle\n\n\nArguments:\n\n\n\n\ndb::MySQLDB\n: Database object (connection and map)\n\n\ndata_values::Dict{ASCIIString, Any}\n: Array of (string) values\n\n\nverbose\n: Print debugginh info\n\n\n\n\n#\n\n\nBioMedQuery.DBUtils.insert_row!\n \n \nFunction\n.\n\n\ninsert_row!(db, tablename, values)\n\n\n\n\nInsert a row of values into the specified table for a given a MySQL database handle\n\n\nArguments:\n\n\n\n\ndb::MySQLDB\n: Database object (connection and map)\n\n\ndata_values::Dict{ASCIIString, Any}\n: Array of (string) values\n\n\nverbose\n: Print debugginh info\n\n\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n \n \nMethod\n.\n\n\nassemble_vals(data_values)\n\n\n\n\nGiven a dictionary containg (:column=\nvalue) return a single string properly formatted for a MySQL insert. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\n#\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_select\n \n \nFunction\n.\n\n\nassemble_vals(data_values)\n\n\n\n\nGiven a dictionary containg (:column=\nvalue), return a single string properly formatted for a MySQL SELECT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.\n\n\n#\n\n\nBioMedQuery.DBUtils.colname_dict\n \n \nMethod\n.\n\n\ncolname_dict_(con)\n\n\n\n\nReturn a dictionary maping tables and their columns for a given MySQL-connection/SQLite-database\n\n\n#\n\n\nBioMedQuery.DBUtils.select_all_tables\n \n \nMethod\n.\n\n\nselect_all_tables_mysql(con)\n\n\n\n\nReturn an array of all tables in a given MySQL database\n\n\n#\n\n\nBioMedQuery.DBUtils.select_all_tables\n \n \nMethod\n.\n\n\nselect_all_tables_mysql(con)\n\n\n\n\nReturn an array of all tables in a given MySQL database\n\n\n#\n\n\nBioMedQuery.DBUtils.select_columns\n \n \nMethod\n.\n\n\nselect_columns_mysql(con, table)\n\n\n\n\nFor a MySQL database, return an array of all columns in the given table\n\n\n#\n\n\nBioMedQuery.DBUtils.select_columns\n \n \nMethod\n.\n\n\nselect_columns(db, table)\n\n\n\n\nReturn an array with names of columns in the given table", 
            "title": "Database Utilities"
        }, 
        {
            "location": "/dbutils/#import-module", 
            "text": "using BioMedQuery.DBUtils", 
            "title": "Import Module"
        }, 
        {
            "location": "/dbutils/#index", 
            "text": "BioMedQuery.DBUtils.assemble_cols_and_vals  BioMedQuery.DBUtils.assemble_cols_and_vals_select  BioMedQuery.DBUtils.assemble_vals  BioMedQuery.DBUtils.colname_dict  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_select  BioMedQuery.DBUtils.init_mysql_database  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.select_columns", 
            "title": "Index"
        }, 
        {
            "location": "/dbutils/#functions", 
            "text": "#  BioMedQuery.DBUtils.assemble_vals     Method .  assemble_vals(data_values, column_names)  Given a Dict of values and the column names, return a single string properly formatted for a MySQL INSERT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  #  BioMedQuery.DBUtils.db_query     Method .  query_mysql(con, query_code)  Execute a mysql command  #  BioMedQuery.DBUtils.db_query     Method .  query(db, query_code)  Execute a SQLite command  #  BioMedQuery.DBUtils.db_select     Method .  select_(con, colnames, tablename, data_values)  Perform: SELECT colnames tablename WHERE keys(data_values)=values(data_values)  #  BioMedQuery.DBUtils.init_mysql_database     Method .  init_mysql_database(;host =  localhost , dbname= test ,\nusername= root , pswd= , mysql_code=nothing, overwrite=false)  Create a MySQL database using the code inside mysql_code  Arguments   host ,  dbname ,  user ,  pswd  mysql_code::ASCIIString : String with MySQL code that crates all default tables  overwrite::Bool  : Flag, if true and dbname exists, it deletes it   Output   con : Database connection and table-column names map   #  BioMedQuery.DBUtils.insert_row!     Function .  insert_row!(db, tablename, values)  Insert a row of values into the specified table for a given a SQLite database handle  Arguments:   db::MySQLDB : Database object (connection and map)  data_values::Dict{ASCIIString, Any} : Array of (string) values  verbose : Print debugginh info   #  BioMedQuery.DBUtils.insert_row!     Function .  insert_row!(db, tablename, values)  Insert a row of values into the specified table for a given a MySQL database handle  Arguments:   db::MySQLDB : Database object (connection and map)  data_values::Dict{ASCIIString, Any} : Array of (string) values  verbose : Print debugginh info   #  BioMedQuery.DBUtils.assemble_cols_and_vals     Method .  assemble_vals(data_values)  Given a dictionary containg (:column= value) return a single string properly formatted for a MySQL insert. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  #  BioMedQuery.DBUtils.assemble_cols_and_vals_select     Function .  assemble_vals(data_values)  Given a dictionary containg (:column= value), return a single string properly formatted for a MySQL SELECT. E.g MySQL requires CHAR or other non-numeric values be passed with single quotes around them.  #  BioMedQuery.DBUtils.colname_dict     Method .  colname_dict_(con)  Return a dictionary maping tables and their columns for a given MySQL-connection/SQLite-database  #  BioMedQuery.DBUtils.select_all_tables     Method .  select_all_tables_mysql(con)  Return an array of all tables in a given MySQL database  #  BioMedQuery.DBUtils.select_all_tables     Method .  select_all_tables_mysql(con)  Return an array of all tables in a given MySQL database  #  BioMedQuery.DBUtils.select_columns     Method .  select_columns_mysql(con, table)  For a MySQL database, return an array of all columns in the given table  #  BioMedQuery.DBUtils.select_columns     Method .  select_columns(db, table)  Return an array with names of columns in the given table", 
            "title": "Functions"
        }, 
        {
            "location": "/library/", 
            "text": "Index\n\n\n\n\nBioMedQuery.UMLS.Credentials\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals\n\n\nBioMedQuery.DBUtils.assemble_cols_and_vals_select\n\n\nBioMedQuery.DBUtils.assemble_vals\n\n\nBioMedQuery.DBUtils.colname_dict\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_query\n\n\nBioMedQuery.DBUtils.db_select\n\n\nBioMedQuery.DBUtils.init_mysql_database\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.insert_row!\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_all_tables\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.DBUtils.select_columns\n\n\nBioMedQuery.Entrez.DB.all_pmids\n\n\nBioMedQuery.Entrez.DB.get_article_mesh\n\n\nBioMedQuery.Entrez.efetch\n\n\nBioMedQuery.Entrez.elink\n\n\nBioMedQuery.Entrez.eparse\n\n\nBioMedQuery.Entrez.esearch\n\n\nBioMedQuery.Entrez.esummary\n\n\nBioMedQuery.Entrez.save_efetch_mysql\n\n\nBioMedQuery.Entrez.save_efetch_sqlite\n\n\nBioMedQuery.UMLS.best_match_cui\n\n\nBioMedQuery.UMLS.get_semantic_type\n\n\nBioMedQuery.UMLS.search_umls", 
            "title": "Library"
        }, 
        {
            "location": "/library/#index", 
            "text": "BioMedQuery.UMLS.Credentials  BioMedQuery.DBUtils.assemble_cols_and_vals  BioMedQuery.DBUtils.assemble_cols_and_vals_select  BioMedQuery.DBUtils.assemble_vals  BioMedQuery.DBUtils.colname_dict  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_query  BioMedQuery.DBUtils.db_select  BioMedQuery.DBUtils.init_mysql_database  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.insert_row!  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_all_tables  BioMedQuery.DBUtils.select_columns  BioMedQuery.DBUtils.select_columns  BioMedQuery.Entrez.DB.all_pmids  BioMedQuery.Entrez.DB.get_article_mesh  BioMedQuery.Entrez.efetch  BioMedQuery.Entrez.elink  BioMedQuery.Entrez.eparse  BioMedQuery.Entrez.esearch  BioMedQuery.Entrez.esummary  BioMedQuery.Entrez.save_efetch_mysql  BioMedQuery.Entrez.save_efetch_sqlite  BioMedQuery.UMLS.best_match_cui  BioMedQuery.UMLS.get_semantic_type  BioMedQuery.UMLS.search_umls", 
            "title": "Index"
        }
    ]
}