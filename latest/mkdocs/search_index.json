{
    "docs": [
        {
            "location": "/", 
            "text": "NLM Julia Package\n\n\nJulia langauge utilities to interact with databases/APIs provided by the National Library of Medicine (NLM)\n\n\nSupported databases/APIS include:\n\n\n\n\nEntrez Programming Utilities (E-utilities)\n\n\nUnified Medical Language System (UMLS)\n\n\nClinical Trials\n \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013-\n\n\n\n\n\n\nInstallation\n\n\nPkg.clone(\nhttps://github.com/bcbi/BioMedQuery.jl.git\n)\n\n\n\n\n\n\nSister Packages\n\n\n\n\nPubMedMiner\n - Executables to search PubMed, link Mesh Descriptors to to UMLS concepts and visualize results.\n\n\nXMLConvert\n - Utilities to convert, flatten and explore XML file. Useful to investigate server responses.", 
            "title": "Overview"
        }, 
        {
            "location": "/#nlm-julia-package", 
            "text": "Julia langauge utilities to interact with databases/APIs provided by the National Library of Medicine (NLM)  Supported databases/APIS include:   Entrez Programming Utilities (E-utilities)  Unified Medical Language System (UMLS)  Clinical Trials  \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013-", 
            "title": "NLM Julia Package"
        }, 
        {
            "location": "/#installation", 
            "text": "Pkg.clone( https://github.com/bcbi/BioMedQuery.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#sister-packages", 
            "text": "PubMedMiner  - Executables to search PubMed, link Mesh Descriptors to to UMLS concepts and visualize results.  XMLConvert  - Utilities to convert, flatten and explore XML file. Useful to investigate server responses.", 
            "title": "Sister Packages"
        }, 
        {
            "location": "/entrez/", 
            "text": "Julia interface to \nEntrez Utilities API\n. For executables to search PubMed, see the sister package \nPubMedMiner\n \n\n\nThe following functions have been implemented:\n\n\n\n\nESearch\n\n\nEFetch\n \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013- ##Import \nusing NLM.Entrez\n\n\n\n\n\n\nESearch\n\n\nEntrez.esearch\n - Function\n\n\nArguments\n\n\n\n\nsearch_dic::Dict\n - Dictionary specifying search criteria\n\n\n\n\nResults\n\n\n\n\n::ASCIIString\n - XML response from NCBI\n\n\n\n\nUsage Example\n\n\nsearch_term = \nobstructive sleep apnea[MeSH Major Topic]\n\nsearch_dic = Dict(\ndb\n=\npubmed\n, \nterm\n =\n search_term,\n\nretstart\n =\n 0, \nretmax\n=\n10000, \ntool\n =\nBioJulia\n,\n\nemail\n =\n \nemail\n)\nesearch_response = esearch(search_dic)\n\n\n\n\nNote: - email must be a valid email address (otherwise pubmed will block you) - the search term corresponds to the string to submit to PubMed. It may contain one or more filtering criteria using AND/OR. For instance:\n\n\n`(asthma[MeSH Terms]) AND (\n2001/01/29\n[Date - Publication] : \n2010\n[Date - Publication])`.\nSee [NCBI-search](http://www.ncbi.nlm.nih.gov/pubmed/advanced)\n\n\n\n\n\n\nXML to dictionary\n\n\nIt may be useful to convert the XML string to a dictionary using \nEntrez.eparse\n\n\n\n\nEFetch\n\n\nEntrez.efetch\n - Function\n\n\nRetrieves the list of ID's returned by esearch\n\n\nArguments\n\n\n\n\nfetch_dic::Dict\n - Dictionary specifying fetch criteria\n\n\nid_list::Array\n - List of ids embedded in response from esearch\n\n\n\n\nResults\n\n\n\n\n::ASCIIString\n - XML response from NCBI\n\n\n\n\nUsage Example\n\n\nGet the list of ids\n\n\nif !haskey(esearch_dict, \nIdList\n)\n  error(\nError: IdList not found\n)\nend\n\nids = []\n\nfor id_node in esearch_dict[\nIdList\n][1][\nId\n]\n  push!(ids, id_node)\nend\n\n\n\n\nDefine the fetch dictionary\n\n\nfetch_dic = Dict(\ndb\n=\npubmed\n,\ntool\n =\nBioJulia\n,\n\nemail\n =\n email, \nretmode\n =\n \nxml\n, \nrettype\n=\nnull\n)\n\n\n\n\nFetch \nefetch_response = efetch(fetch_dic, ids)\n\n\nConvert response-xml to dictionary\n\n\nUse \nEntrez.eparse\n\n\nefetch_dict = eparse(efetch_response)\n\n\n\n\nSave the results to a sqlite database\n\n\nUse \nEntrez.save_efetch\n\n\nEParse\n\n\nesearch_dict = eparse(esearch_response)\n\n\n\n\nSaveEFetch\n\n\nEntrez.save_efetch\n - Function\n\n\nArguments\n\n\n\n\nefetch_dict::Dict\n - Dictionary corresponding to an EFetch response\n\n\ndb_path:ASCIIString\n - Path to database file. If it doesn't exist it will create one. The user is responsible for cleanning.\n\n\n\n\nResponse\n\n\n\n\n::SQLite.DB\n - sqlite database, where the results have been stored\n\n\n\n\nThe following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue\n\n\n\n\n\n\nUsage Example\n\n\ndb = save_efetch(efetch_dict, db_path)", 
            "title": "Entrez"
        }, 
        {
            "location": "/entrez/#esearch", 
            "text": "Entrez.esearch  - Function", 
            "title": "ESearch"
        }, 
        {
            "location": "/entrez/#arguments", 
            "text": "search_dic::Dict  - Dictionary specifying search criteria", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#results", 
            "text": "::ASCIIString  - XML response from NCBI", 
            "title": "Results"
        }, 
        {
            "location": "/entrez/#usage-example", 
            "text": "search_term =  obstructive sleep apnea[MeSH Major Topic] \nsearch_dic = Dict( db = pubmed ,  term  =  search_term, retstart  =  0,  retmax = 10000,  tool  = BioJulia , email  =   email )\nesearch_response = esearch(search_dic)", 
            "title": "Usage Example"
        }, 
        {
            "location": "/entrez/#note-email-must-be-a-valid-email-address-otherwise-pubmed-will-block-you-the-search-term-corresponds-to-the-string-to-submit-to-pubmed-it-may-contain-one-or-more-filtering-criteria-using-andor-for-instance", 
            "text": "`(asthma[MeSH Terms]) AND ( 2001/01/29 [Date - Publication] :  2010 [Date - Publication])`.\nSee [NCBI-search](http://www.ncbi.nlm.nih.gov/pubmed/advanced)", 
            "title": "Note: - email must be a valid email address (otherwise pubmed will block you) - the search term corresponds to the string to submit to PubMed. It may contain one or more filtering criteria using AND/OR. For instance:"
        }, 
        {
            "location": "/entrez/#xml-to-dictionary", 
            "text": "It may be useful to convert the XML string to a dictionary using  Entrez.eparse", 
            "title": "XML to dictionary"
        }, 
        {
            "location": "/entrez/#efetch", 
            "text": "Entrez.efetch  - Function  Retrieves the list of ID's returned by esearch", 
            "title": "EFetch"
        }, 
        {
            "location": "/entrez/#arguments_1", 
            "text": "fetch_dic::Dict  - Dictionary specifying fetch criteria  id_list::Array  - List of ids embedded in response from esearch", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#results_1", 
            "text": "::ASCIIString  - XML response from NCBI", 
            "title": "Results"
        }, 
        {
            "location": "/entrez/#usage-example_1", 
            "text": "", 
            "title": "Usage Example"
        }, 
        {
            "location": "/entrez/#get-the-list-of-ids", 
            "text": "if !haskey(esearch_dict,  IdList )\n  error( Error: IdList not found )\nend\n\nids = []\n\nfor id_node in esearch_dict[ IdList ][1][ Id ]\n  push!(ids, id_node)\nend", 
            "title": "Get the list of ids"
        }, 
        {
            "location": "/entrez/#define-the-fetch-dictionary", 
            "text": "fetch_dic = Dict( db = pubmed , tool  = BioJulia , email  =  email,  retmode  =   xml ,  rettype = null )", 
            "title": "Define the fetch dictionary"
        }, 
        {
            "location": "/entrez/#fetch-efetch_response-efetchfetch_dic-ids", 
            "text": "", 
            "title": "Fetch efetch_response = efetch(fetch_dic, ids)"
        }, 
        {
            "location": "/entrez/#convert-response-xml-to-dictionary", 
            "text": "Use  Entrez.eparse  efetch_dict = eparse(efetch_response)", 
            "title": "Convert response-xml to dictionary"
        }, 
        {
            "location": "/entrez/#save-the-results-to-a-sqlite-database", 
            "text": "Use  Entrez.save_efetch", 
            "title": "Save the results to a sqlite database"
        }, 
        {
            "location": "/entrez/#eparse", 
            "text": "esearch_dict = eparse(esearch_response)", 
            "title": "EParse"
        }, 
        {
            "location": "/entrez/#saveefetch", 
            "text": "Entrez.save_efetch  - Function", 
            "title": "SaveEFetch"
        }, 
        {
            "location": "/entrez/#arguments_2", 
            "text": "efetch_dict::Dict  - Dictionary corresponding to an EFetch response  db_path:ASCIIString  - Path to database file. If it doesn't exist it will create one. The user is responsible for cleanning.", 
            "title": "Arguments"
        }, 
        {
            "location": "/entrez/#response", 
            "text": "::SQLite.DB  - sqlite database, where the results have been stored   The following schema has been used to store the results. If you are interested in having this module store additional fields, feel free to open an issue", 
            "title": "Response"
        }, 
        {
            "location": "/entrez/#usage-example_2", 
            "text": "db = save_efetch(efetch_dict, db_path)", 
            "title": "Usage Example"
        }, 
        {
            "location": "/umls/", 
            "text": "Search the Unified Medical Language System (UMLS). For more details on the \nREST API\n\n\nImport\n\n\nusing NLM.UMLS\n\n\n\n\n\n\nSearch by term\n\n\nSearch UMLS using the Rest API. The user needs approved credentials and a query dictionary. Sign up for credentials \nhere\n\n\n\n\nTo create credentials\n\n\n import NLM.UMLS:Credentials\n credentials = Credentials(user, psswd)\n ```\n\n### To compose the query\n\n ```\n query = Dict(\nstring\n=\nterm, \nsearchType\n=\nexact\n )\n ```\n\n### To search all concepts associeted with the indicated term\n\n ```\n all_results= search_umls(credentials, query)\n ```\n\n###To retrieve the CUI for the rest match\n\n\n\n\n\ncui = best_match_cui(all_results, term)\n\n\n\n### Get UMLS concepts associated with a CUI\n\n\n\n\n\nall_concepts = get_concepts(c, cui) ``` \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013-", 
            "title": "UMLS"
        }, 
        {
            "location": "/umls/#import", 
            "text": "using NLM.UMLS", 
            "title": "Import"
        }, 
        {
            "location": "/umls/#search-by-term", 
            "text": "Search UMLS using the Rest API. The user needs approved credentials and a query dictionary. Sign up for credentials  here", 
            "title": "Search by term"
        }, 
        {
            "location": "/umls/#to-create-credentials", 
            "text": "import NLM.UMLS:Credentials\n credentials = Credentials(user, psswd)\n ```\n\n### To compose the query\n\n ```\n query = Dict( string = term,  searchType = exact  )\n ```\n\n### To search all concepts associeted with the indicated term\n\n ```\n all_results= search_umls(credentials, query)\n ```\n\n###To retrieve the CUI for the rest match  cui = best_match_cui(all_results, term)  \n### Get UMLS concepts associated with a CUI  all_concepts = get_concepts(c, cui) ``` \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013-", 
            "title": "To create credentials"
        }, 
        {
            "location": "/ct/", 
            "text": "Submit and save queries to \nclinicaltrials.gov\n\n\nImport\n\n\nusing NLM.CT\n\n\n\n\n\n\nSearch and save\n\n\n\n\nCreate a query:\n\n\nquery = Dict(\nterm\n =\n \nacne\n, \nage\n=\nInt(CT.child), \nlocn\n =\n \nNew York, NY\n)\n\n\n\n\nNote: The term can also indicate joint searches, e.g.\n\n\nterm\n =\n \naspirin OR ibuprofen\n\n\n\n\n\n\n\nSubmit and save:\n\n\nfout= \n./test_CT_search.zip\n\nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Clinical Trials"
        }, 
        {
            "location": "/ct/#import", 
            "text": "using NLM.CT", 
            "title": "Import"
        }, 
        {
            "location": "/ct/#search-and-save", 
            "text": "", 
            "title": "Search and save"
        }, 
        {
            "location": "/ct/#create-a-query", 
            "text": "query = Dict( term  =   acne ,  age = Int(CT.child),  locn  =   New York, NY )  Note: The term can also indicate joint searches, e.g.  term  =   aspirin OR ibuprofen", 
            "title": "Create a query:"
        }, 
        {
            "location": "/ct/#submit-and-save", 
            "text": "fout=  ./test_CT_search.zip \nstatus = NLM.CT.search_ct(query, fout;)", 
            "title": "Submit and save:"
        }
    ]
}